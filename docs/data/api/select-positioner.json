{
  "props": {
    "align": {
      "type": {
        "name": "enum",
        "description": "'center'<br>&#124;&nbsp;'end'<br>&#124;&nbsp;'start'"
      },
      "default": "'start'"
    },
    "alignOffset": { "type": { "name": "number" }, "default": "0" },
    "anchor": {
      "type": {
        "name": "union",
        "description": "(props, propName) => {\n  if (props[propName] == null) {\n    return new Error(`Prop '${propName}' is required but wasn't specified`);\n  }\n  if (typeof props[propName] !== 'object' || props[propName].nodeType !== 1) {\n    return new Error(`Expected prop '${propName}' to be of type Element`);\n  }\n  return null;\n}<br>&#124;&nbsp;func<br>&#124;&nbsp;{ current?: (props, propName) => {\n  if (props[propName] == null) {\n    return null;\n  }\n  if (typeof props[propName] !== 'object' || props[propName].nodeType !== 1) {\n    return new Error(`Expected prop '${propName}' to be of type Element`);\n  }\n  return null;\n} }<br>&#124;&nbsp;{ contextElement?: (props, propName) => {\n  if (props[propName] == null) {\n    return null;\n  }\n  if (typeof props[propName] !== 'object' || props[propName].nodeType !== 1) {\n    return new Error(`Expected prop '${propName}' to be of type Element`);\n  }\n  return null;\n}, getBoundingClientRect: func, getClientRects?: func }"
      }
    },
    "arrowPadding": { "type": { "name": "number" }, "default": "5" },
    "className": { "type": { "name": "union", "description": "func<br>&#124;&nbsp;string" } },
    "collisionBoundary": {
      "type": {
        "name": "union",
        "description": "'clipping-ancestors'<br>&#124;&nbsp;Array&lt;(props, propName) => {\n  if (props[propName] == null) {\n    return new Error(`Prop '${propName}' is required but wasn't specified`);\n  }\n  if (typeof props[propName] !== 'object' || props[propName].nodeType !== 1) {\n    return new Error(`Expected prop '${propName}' to be of type Element`);\n  }\n  return null;\n}&gt;<br>&#124;&nbsp;(props, propName) => {\n  if (props[propName] == null) {\n    return new Error(`Prop '${propName}' is required but wasn't specified`);\n  }\n  if (typeof props[propName] !== 'object' || props[propName].nodeType !== 1) {\n    return new Error(`Expected prop '${propName}' to be of type Element`);\n  }\n  return null;\n}<br>&#124;&nbsp;{ height: number, width: number, x: number, y: number }"
      },
      "default": "'clipping-ancestors'"
    },
    "collisionPadding": {
      "type": {
        "name": "union",
        "description": "number<br>&#124;&nbsp;{ bottom?: number, left?: number, right?: number, top?: number }"
      },
      "default": "5"
    },
    "container": {
      "type": {
        "name": "union",
        "description": "(props, propName) => {\n  if (props[propName] == null) {\n    return new Error(`Prop '${propName}' is required but wasn't specified`);\n  }\n  if (typeof props[propName] !== 'object' || props[propName].nodeType !== 1) {\n    return new Error(`Expected prop '${propName}' to be of type Element`);\n  }\n  return null;\n}<br>&#124;&nbsp;{ current?: (props, propName) => {\n  if (props[propName] == null) {\n    return null;\n  }\n  if (typeof props[propName] !== 'object' || props[propName].nodeType !== 1) {\n    return new Error(`Expected prop '${propName}' to be of type Element`);\n  }\n  return null;\n} }"
      }
    },
    "hideWhenDetached": { "type": { "name": "bool" }, "default": "false" },
    "positionMethod": {
      "type": { "name": "enum", "description": "'absolute'<br>&#124;&nbsp;'fixed'" },
      "default": "'absolute'"
    },
    "render": { "type": { "name": "union", "description": "element<br>&#124;&nbsp;func" } },
    "side": {
      "type": {
        "name": "enum",
        "description": "'bottom'<br>&#124;&nbsp;'left'<br>&#124;&nbsp;'right'<br>&#124;&nbsp;'top'"
      },
      "default": "'bottom'"
    },
    "sideOffset": { "type": { "name": "number" }, "default": "0" },
    "sticky": { "type": { "name": "bool" }, "default": "false" },
    "trackAnchor": { "type": { "name": "bool" }, "default": "true" }
  },
  "name": "SelectPositioner",
  "imports": [
    "import { Select } from '@base-ui-components/react/select';\nconst SelectPositioner = Select.Positioner;"
  ],
  "classes": [],
  "spread": true,
  "themeDefaultProps": true,
  "muiName": "SelectPositioner",
  "forwardsRefTo": "HTMLDivElement",
  "filename": "/packages/react/src/select/positioner/SelectPositioner.tsx",
  "inheritance": null,
  "demos": "<ul><li><a href=\"/components/react-select/\">Select</a></li></ul>",
  "cssComponent": false
}
