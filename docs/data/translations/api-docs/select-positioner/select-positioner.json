{
  "componentDescription": "",
  "propDescriptions": {
    "align": {
      "description": "The align of the Select element to the anchor element along its cross axis."
    },
    "alignOffset": { "description": "The offset of the Select element along its align axis." },
    "anchor": { "description": "The anchor element to which the Select popup will be placed at." },
    "arrowPadding": {
      "description": "Determines the padding between the arrow and the Select popup&#39;s edges. Useful when the popover popup has rounded corners via <code>border-radius</code>."
    },
    "className": {
      "description": "Class names applied to the element or a function that returns them based on the component&#39;s state."
    },
    "collisionBoundary": {
      "description": "The boundary that the Select element should be constrained to."
    },
    "collisionPadding": { "description": "The padding of the collision boundary." },
    "container": {
      "description": "The container element to which the Select popup will be appended to."
    },
    "hideWhenDetached": {
      "description": "If <code>true</code>, the Select will be hidden if it is detached from its anchor element due to differing clipping contexts."
    },
    "positionMethod": {
      "description": "The CSS position method for positioning the Select popup element."
    },
    "render": { "description": "A function to customize rendering of the component." },
    "side": {
      "description": "The side of the anchor element that the Select element should align to."
    },
    "sideOffset": { "description": "The gap between the anchor element and the Select element." },
    "sticky": {
      "description": "If <code>true</code>, allow the Select to remain in stuck view while the anchor element is scrolled out of view."
    },
    "trackAnchor": {
      "description": "Whether the select popup continuously tracks its anchor after the initial positioning upon mount."
    }
  },
  "classDescriptions": {}
}
