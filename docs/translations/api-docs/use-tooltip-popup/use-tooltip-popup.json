{
  "hookDescription": "The basic building block for creating custom tooltips.",
  "parametersDescriptions": {
    "alignment": {
      "description": "The alignment of the tooltip element to the anchor element along its cross axis."
    },
    "alignmentOffset": {
      "description": "The offset of the tooltip element along its alignment axis."
    },
    "anchor": { "description": "The anchor element of the tooltip popup." },
    "arrowPadding": {
      "description": "Determines the padding between the arrow and the tooltip content. Useful when the tooltip has rounded corners via <code>border-radius</code>."
    },
    "closeDelay": {
      "description": "The delay in milliseconds before the tooltip closes after the trigger element is unhovered."
    },
    "collisionBoundary": {
      "description": "The boundary that the tooltip element should be constrained to."
    },
    "collisionPadding": { "description": "The padding of the collision boundary." },
    "delay": {
      "description": "The delay in milliseconds before the tooltip opens after the trigger element is hovered."
    },
    "delayType": { "description": "The type of open delay." },
    "followCursorAxis": {
      "description": "Determines which axis the tooltip should follow the cursor on."
    },
    "getRootPopupProps": { "description": "The props to spread on the tooltip popup element." },
    "hideWhenDetached": {
      "description": "If <code>true</code>, the tooltip will be hidden if it is detached from its anchor element due to differing clipping contexts."
    },
    "instant": { "description": "Determines if the tooltip is in an instant phase." },
    "keepMounted": {
      "description": "If <code>true</code>, the tooltip will be mounted, including CSS transitions or animations."
    },
    "mounted": { "description": "Determines if the tooltip is mounted." },
    "open": { "description": "If <code>true</code>, the tooltip is open." },
    "positionStrategy": {
      "description": "The CSS position strategy for positioning the tooltip popup element."
    },
    "rootContext": { "description": "The tooltip root context." },
    "setMounted": { "description": "Callback fired when the mounted state changes." },
    "side": {
      "description": "The side of the anchor element that the tooltip element should align to."
    },
    "sideOffset": { "description": "The gap between the anchor element and the tooltip element." },
    "sticky": {
      "description": "If <code>true</code>, allow the tooltip to remain in stuck view while the anchor element is scrolled out of view."
    }
  },
  "returnValueDescriptions": {
    "alignment": { "description": "The rendered alignment of the tooltip element." },
    "arrowRef": { "description": "The ref of the arrow element." },
    "arrowUncentered": { "description": "Determines if the arrow can not be centered." },
    "getArrowProps": { "description": "Props to spread on the arrow element." },
    "getPopupProps": { "description": "Props to spread on the tooltip content element." },
    "mounted": {
      "description": "Whether the tooltip is mounted, including CSS transitions or animations."
    },
    "side": { "description": "The rendered side of the tooltip element." }
  }
}
