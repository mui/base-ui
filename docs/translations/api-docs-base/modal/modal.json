{
  "componentDescription": "Modal is a lower-level construct that is leveraged by the following components:\n\n*   [Dialog](https://mui.com/material-ui/api/dialog/)\n*   [Drawer](https://mui.com/material-ui/api/drawer/)\n*   [Menu](https://mui.com/material-ui/api/menu/)\n*   [Popover](https://mui.com/material-ui/api/popover/)\n\nIf you are creating a modal dialog, you probably want to use the [Dialog](https://mui.com/material-ui/api/dialog/) component\nrather than directly using Modal.\n\nThis component shares many concepts with [react-overlays](https://react-bootstrap.github.io/react-overlays/#modals).",
  "propDescriptions": {
    "children": { "description": "A single child content element.", "requiresRef": true },
    "closeAfterTransition": {
      "description": "When set to true the Modal waits until a nested Transition is completed before closing."
    },
    "container": {
      "description": "An HTML element or function that returns one. The <code>container</code> will have the portal children appended to it.<br>You can also provide a callback, which is called in a React layout effect. This lets you set the container from a ref, and also makes server-side rendering possible.<br>By default, it uses the body of the top-level document object, so it&#39;s simply <code>document.body</code> most of the time."
    },
    "disableAutoFocus": {
      "description": "If <code>true</code>, the modal will not automatically shift focus to itself when it opens, and replace it to the last focused element when it closes. This also works correctly with any modal children that have the <code>disableAutoFocus</code> prop.<br>Generally this should never be set to <code>true</code> as it makes the modal less accessible to assistive technologies, like screen readers."
    },
    "disableEnforceFocus": {
      "description": "If <code>true</code>, the modal will not prevent focus from leaving the modal while open.<br>Generally this should never be set to <code>true</code> as it makes the modal less accessible to assistive technologies, like screen readers."
    },
    "disableEscapeKeyDown": {
      "description": "If <code>true</code>, hitting escape will not fire the <code>onClose</code> callback."
    },
    "disablePortal": {
      "description": "The <code>children</code> will be under the DOM hierarchy of the parent component."
    },
    "disableRestoreFocus": {
      "description": "If <code>true</code>, the modal will not restore focus to previously focused element once modal is hidden or unmounted."
    },
    "disableScrollLock": { "description": "Disable the scroll lock behavior." },
    "hideBackdrop": { "description": "If <code>true</code>, the backdrop is not rendered." },
    "keepMounted": {
      "description": "Always keep the children in the DOM. This prop can be useful in SEO situation or when you want to maximize the responsiveness of the Modal."
    },
    "onBackdropClick": { "description": "Callback fired when the backdrop is clicked." },
    "onClose": {
      "description": "Callback fired when the component requests to be closed. The <code>reason</code> parameter can optionally be used to control the response to <code>onClose</code>.",
      "typeDescriptions": {
        "event": "The event source of the callback.",
        "reason": "Can be: <code>&quot;escapeKeyDown&quot;</code>, <code>&quot;backdropClick&quot;</code>."
      }
    },
    "onTransitionEnter": { "description": "A function called when a transition enters." },
    "onTransitionExited": { "description": "A function called when a transition has exited." },
    "open": { "description": "If <code>true</code>, the component is shown." },
    "slotProps": { "description": "The props used for each slot inside the Modal." },
    "slots": {
      "description": "The components used for each slot inside the Modal. Either a string to use a HTML element or a component."
    }
  },
  "classDescriptions": {
    "hidden": {
      "description": "Class name applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the root element",
      "conditions": "the <code>Modal</code> has exited"
    }
  },
  "slotDescriptions": {
    "backdrop": "The component that renders the backdrop.",
    "root": "The component that renders the root."
  }
}
