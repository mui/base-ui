{
  "componentDescription": "",
  "propDescriptions": {
    "anchor": {
      "description": "An HTML element, <a href=\"https://floating-ui.com/docs/virtual-elements\">virtual element</a>, or a function that returns either. It&#39;s used to set the position of the popup."
    },
    "container": {
      "description": "An HTML element or function that returns one. The container will have the portal children appended to it. By default, it uses the body of the top-level document object, so it&#39;s <code>document.body</code> in these cases."
    },
    "disablePortal": {
      "description": "If <code>true</code>, the popup will be rendered where it is defined, without the use of portals."
    },
    "keepMounted": {
      "description": "If <code>true</code>, the popup will exist in the DOM even if it&#39;s closed. Its visibility will be controlled by the <code>visibility</code> CSS property.<br>Otherwise, a closed popup will be removed from the DOM."
    },
    "middleware": {
      "description": "Collection of Floating UI middleware to use when positioning the popup. If not provided, the <a href=\"https://floating-ui.com/docs/offset\"><code>offset</code></a> and <a href=\"https://floating-ui.com/docs/flip\"><code>flip</code></a> functions will be used."
    },
    "offset": {
      "description": "Distance between a popup and the trigger element. This prop is ignored when custom <code>middleware</code> is provided."
    },
    "open": { "description": "If <code>true</code>, the popup is visible." },
    "placement": {
      "description": "Determines where to place the popup relative to the trigger element."
    },
    "slotProps": { "description": "The props used for each slot inside the Popup." },
    "slots": {
      "description": "The components used for each slot inside the Popup. Either a string to use a HTML element or a component."
    },
    "strategy": { "description": "The type of CSS position property to use (absolute or fixed)." }
  },
  "classDescriptions": {
    "open": {
      "description": "Class name applied to {{nodeName}} when {{conditions}}.",
      "nodeName": "the root element",
      "conditions": "the popup is open"
    }
  },
  "slotDescriptions": { "root": "The component that renders the root." }
}
