{
  "componentDescription": "",
  "propDescriptions": {
    "defaultValue": {
      "description": "The default value. Use when the component is not controlled."
    },
    "disabled": {
      "description": "If <code>true</code>, the component is disabled. The prop defaults to the value (<code>false</code>) inherited from the parent FormControl component."
    },
    "endAdornment": { "description": "Trailing adornment for this input." },
    "error": {
      "description": "If <code>true</code>, the <code>input</code> will indicate an error by setting the <code>aria-invalid</code> attribute on the input and the <code>baseui--error</code> class on the root element."
    },
    "id": { "description": "The id of the <code>input</code> element." },
    "max": { "description": "The maximum value." },
    "min": { "description": "The minimum value." },
    "onChange": {
      "description": "Callback fired after the value is clamped and changes - when the <code>input</code> is blurred or when the stepper buttons are triggered. Called with <code>undefined</code> when the value is unset.",
      "typeDescriptions": {
        "event": "The event source of the callback",
        "value": "The new value of the component"
      }
    },
    "onInputChange": {
      "description": "Callback fired when the <code>input</code> value changes after each keypress, before clamping is applied. Note that <code>event.target.value</code> may contain values that fall outside of <code>min</code> and <code>max</code> or are otherwise &quot;invalid&quot;.",
      "typeDescriptions": { "event": "The event source of the callback." }
    },
    "placeholder": {
      "description": "The short hint displayed in the <code>input</code> before the user enters a value."
    },
    "readOnly": {
      "description": "If <code>true</code>, the <code>input</code> element becomes read-only. The stepper buttons remain active, with the addition that they are now keyboard focusable."
    },
    "required": {
      "description": "If <code>true</code>, the <code>input</code> element is required. The prop defaults to the value (<code>false</code>) inherited from the parent FormControl component."
    },
    "shiftMultiplier": {
      "description": "Multiplier applied to <code>step</code> if the shift key is held while incrementing or decrementing the value. Defaults to <code>10</code>."
    },
    "slotProps": { "description": "The props used for each slot inside the NumberInput." },
    "slots": {
      "description": "The components used for each slot inside the InputBase. Either a string to use a HTML element or a component."
    },
    "startAdornment": { "description": "Leading adornment for this input." },
    "step": { "description": "The amount that the value changes on each increment or decrement." },
    "value": { "description": "The current value. Use when the component is controlled." }
  },
  "classDescriptions": {
    "adornedEnd": {
      "description": "Class name applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the root element",
      "conditions": "<code>endAdornment</code> is provided"
    },
    "adornedStart": {
      "description": "Class name applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the root element",
      "conditions": "<code>startAdornment</code> is provided"
    },
    "disabled": {
      "description": "Class name applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the root element",
      "conditions": "<code>disabled={true}</code>"
    },
    "error": {
      "description": "State class applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the root element",
      "conditions": "<code>error={true}</code>"
    },
    "focused": {
      "description": "Class name applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the root element",
      "conditions": "the component is focused"
    },
    "formControl": {
      "description": "Class name applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the root element",
      "conditions": "the component is a descendant of <code>FormControl</code>"
    },
    "readOnly": {
      "description": "State class applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the root element",
      "conditions": "<code>readOnly={true}</code>"
    }
  },
  "slotDescriptions": {
    "decrementButton": "The component that renders the decrement button.",
    "incrementButton": "The component that renders the increment button.",
    "input": "The component that renders the input.",
    "root": "The component that renders the root."
  }
}
