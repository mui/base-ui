// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`mdxToMarkdown > should transform Accordion MDX content to markdown with metadata 1`] = `
"# Accordion



A high-quality, unstyled React accordion component that displays a set of collapsible panels with headings.

## Demo

### Tailwind

This example shows how to implement the component using Tailwind CSS.

\`\`\`tsx
/* index.tsx */
import * as React from 'react';
import { Accordion } from '@base-ui-components/react/accordion';

export default function ExampleAccordion() {
  return (
    <Accordion.Root className="flex w-96 max-w-[calc(100vw-8rem)] flex-col justify-center text-gray-900">
      <Accordion.Item className="border-b border-gray-200">
        <Accordion.Header>
          <Accordion.Trigger className="group relative flex w-full items-baseline justify-between gap-4 bg-gray-50 py-2 pr-1 pl-3 text-left font-medium hover:bg-gray-100 focus-visible:z-1 focus-visible:outline focus-visible:outline-2 focus-visible:outline-blue-800">
            What is Base UI?
            <PlusIcon className="mr-2 size-3 shrink-0 transition-all ease-out group-data-[panel-open]:scale-110 group-data-[panel-open]:rotate-45" />
          </Accordion.Trigger>
        </Accordion.Header>
        <Accordion.Panel className="h-[var(--accordion-panel-height)] overflow-hidden text-base text-gray-600 transition-[height] ease-out data-[ending-style]:h-0 data-[starting-style]:h-0">
          <div className="p-3">
            Base UI is a library of high-quality unstyled React components for design
            systems and web apps.
          </div>
        </Accordion.Panel>
      </Accordion.Item>

      <Accordion.Item className="border-b border-gray-200">
        <Accordion.Header>
          <Accordion.Trigger className="group relative flex w-full items-baseline justify-between gap-4 bg-gray-50 py-2 pr-1 pl-3 text-left font-medium hover:bg-gray-100 focus-visible:z-1 focus-visible:outline focus-visible:outline-2 focus-visible:outline-blue-800">
            How do I get started?
            <PlusIcon className="mr-2 size-3 shrink-0 transition-all ease-out group-data-[panel-open]:scale-110 group-data-[panel-open]:rotate-45" />
          </Accordion.Trigger>
        </Accordion.Header>
        <Accordion.Panel className="h-[var(--accordion-panel-height)] overflow-hidden text-base text-gray-600 transition-[height] ease-out data-[ending-style]:h-0 data-[starting-style]:h-0">
          <div className="p-3">
            Head to the “Quick start” guide in the docs. If you’ve used unstyled
            libraries before, you’ll feel at home.
          </div>
        </Accordion.Panel>
      </Accordion.Item>

      <Accordion.Item className="border-b border-gray-200">
        <Accordion.Header>
          <Accordion.Trigger className="group relative flex w-full items-baseline justify-between gap-4 bg-gray-50 py-2 pr-1 pl-3 text-left font-medium hover:bg-gray-100 focus-visible:z-1 focus-visible:outline focus-visible:outline-2 focus-visible:outline-blue-800">
            Can I use it for my project?
            <PlusIcon className="mr-2 size-3 shrink-0 transition-all ease-out group-data-[panel-open]:scale-110 group-data-[panel-open]:rotate-45" />
          </Accordion.Trigger>
        </Accordion.Header>
        <Accordion.Panel className="h-[var(--accordion-panel-height)] overflow-hidden text-base text-gray-600 transition-[height] ease-out data-[ending-style]:h-0 data-[starting-style]:h-0">
          <div className="p-3">Of course! Base UI is free and open source.</div>
        </Accordion.Panel>
      </Accordion.Item>
    </Accordion.Root>
  );
}

function PlusIcon(props: React.ComponentProps<'svg'>) {
  return (
    <svg viewBox="0 0 12 12" fill="currentcolor" {...props}>
      <path d="M6.75 0H5.25V5.25H0V6.75L5.25 6.75V12H6.75V6.75L12 6.75V5.25H6.75V0Z" />
    </svg>
  );
}

\`\`\`

### CSS Modules

This example shows how to implement the component using CSS Modules.

\`\`\`css
/* index.module.css */
.Accordion {
  box-sizing: border-box;
  display: flex;
  width: 24rem;
  max-width: calc(100vw - 8rem);
  flex-direction: column;
  justify-content: center;
  color: var(--color-gray-900);
}

.Item {
  border-bottom: 1px solid var(--color-gray-200);
}

.Header {
  margin: 0;
}

.Trigger {
  box-sizing: border-box;
  position: relative;
  display: flex;
  width: 100%;
  gap: 1rem;
  align-items: baseline;
  justify-content: space-between;
  padding-block: 0.5rem;
  padding-inline: 0.75rem 0.25rem;
  color: var(--color-gray-900);
  font-family: inherit;
  font-weight: 500;
  font-size: 1rem;
  line-height: 1.5rem;
  background: var(--color-gray-50);
  border: none;
  outline: none;
  text-align: left;

  @media (hover: hover) {
    &:hover {
      background-color: var(--color-gray-100);
    }
  }

  &:focus-visible {
    outline: 2px solid var(--color-blue);
    z-index: 1;
  }
}

.TriggerIcon {
  box-sizing: border-box;
  flex-shrink: 0;
  width: 0.75rem;
  height: 0.75rem;
  margin-right: 0.5rem;
  transition: transform 150ms ease-out;

  [data-panel-open] > & {
    transform: rotate(45deg) scale(1.1);
  }
}

.Panel {
  box-sizing: border-box;
  height: var(--accordion-panel-height);
  overflow: hidden;
  color: var(--color-gray-600);
  font-size: 1rem;
  line-height: 1.5rem;
  transition: height 150ms ease-out;

  &[data-starting-style],
  &[data-ending-style] {
    height: 0;
  }
}

.Content {
  padding: 0.75rem;
}

\`\`\`

\`\`\`tsx
/* index.tsx */
import * as React from 'react';
import { Accordion } from '@base-ui-components/react/accordion';
import styles from './index.module.css';

export default function ExampleAccordion() {
  return (
    <Accordion.Root className={styles.Accordion}>
      <Accordion.Item className={styles.Item}>
        <Accordion.Header className={styles.Header}>
          <Accordion.Trigger className={styles.Trigger}>
            What is Base UI?
            <PlusIcon className={styles.TriggerIcon} />
          </Accordion.Trigger>
        </Accordion.Header>
        <Accordion.Panel className={styles.Panel}>
          <div className={styles.Content}>
            Base UI is a library of high-quality unstyled React components for design
            systems and web apps.
          </div>
        </Accordion.Panel>
      </Accordion.Item>

      <Accordion.Item className={styles.Item}>
        <Accordion.Header className={styles.Header}>
          <Accordion.Trigger className={styles.Trigger}>
            How do I get started?
            <PlusIcon className={styles.TriggerIcon} />
          </Accordion.Trigger>
        </Accordion.Header>
        <Accordion.Panel className={styles.Panel}>
          <div className={styles.Content}>
            Head to the “Quick start” guide in the docs. If you’ve used unstyled
            libraries before, you’ll feel at home.
          </div>
        </Accordion.Panel>
      </Accordion.Item>

      <Accordion.Item className={styles.Item}>
        <Accordion.Header className={styles.Header}>
          <Accordion.Trigger className={styles.Trigger}>
            Can I use it for my project?
            <PlusIcon className={styles.TriggerIcon} />
          </Accordion.Trigger>
        </Accordion.Header>
        <Accordion.Panel className={styles.Panel}>
          <div className={styles.Content}>
            Of course! Base UI is free and open source.
          </div>
        </Accordion.Panel>
      </Accordion.Item>
    </Accordion.Root>
  );
}

function PlusIcon(props: React.ComponentProps<'svg'>) {
  return (
    <svg viewBox="0 0 12 12" fill="currentcolor" {...props}>
      <path d="M6.75 0H5.25V5.25H0V6.75L5.25 6.75V12H6.75V6.75L12 6.75V5.25H6.75V0Z" />
    </svg>
  );
}

\`\`\`

## Anatomy

Import the component and assemble its parts:

\`\`\`jsx title="Anatomy"
import { Accordion } from '@base-ui-components/react/accordion';

<Accordion.Root>
  <Accordion.Item>
    <Accordion.Header>
      <Accordion.Trigger />
    </Accordion.Header>
    <Accordion.Panel />
  </Accordion.Item>
</Accordion.Root>;
\`\`\`

## API reference

### Root

Groups all parts of the accordion.
Renders a \`<div>\` element.

**Root Props:**

| Prop             | Type                                                                                | Default      | Description                                                                                                                                                                                                |
| :--------------- | :---------------------------------------------------------------------------------- | :----------- | :--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| defaultValue     | \`any[]\`                                                                             | -            | The uncontrolled value of the item(s) that should be initially expanded.To render a controlled accordion, use the \`value\` prop instead.                                                                    |
| value            | \`any[]\`                                                                             | -            | The controlled value of the item(s) that should be expanded.To render an uncontrolled accordion, use the \`defaultValue\` prop instead.                                                                      |
| onValueChange    | \`((value: any[]) => void)\`                                                          | -            | Event handler called when an accordion item is expanded or collapsed.&#xA;Provides the new value as an argument.                                                                                           |
| hiddenUntilFound | \`boolean\`                                                                           | \`false\`      | Allows the browser’s built-in page search to find and expand the panel contents.Overrides the \`keepMounted\` prop and uses \`hidden="until-found"\`&#xA;to hide the element without removing it from the DOM. |
| openMultiple     | \`boolean\`                                                                           | \`true\`       | Whether multiple items can be open at the same time.                                                                                                                                                       |
| disabled         | \`boolean\`                                                                           | \`false\`      | Whether the component should ignore user interaction.                                                                                                                                                      |
| loop             | \`boolean\`                                                                           | \`true\`       | Whether to loop keyboard focus back to the first item&#xA;when the end of the list is reached while using the arrow keys.                                                                                  |
| orientation      | \`Orientation\`                                                                       | \`'vertical'\` | The visual orientation of the accordion.&#xA;Controls whether roving focus uses left/right or up/down arrow keys.                                                                                          |
| className        | \`string \\| ((state: Accordion.Root.State) => string)\`                               | -            | CSS class applied to the element, or a function that&#xA;returns a class based on the component’s state.                                                                                                   |
| keepMounted      | \`boolean\`                                                                           | \`false\`      | Whether to keep the element in the DOM while the panel is closed.&#xA;This prop is ignored when \`hiddenUntilFound\` is used.                                                                                |
| render           | \`ReactElement \\| ((props: HTMLProps, state: Accordion.Root.State) => ReactElement)\` | -            | Allows you to replace the component’s HTML element&#xA;with a different tag, or compose it with another component.Accepts a \`ReactElement\` or a function that returns the element to render.               |

**Root Data Attributes:**

| Attribute        | Type | Description                                 |
| :--------------- | :--- | :------------------------------------------ |
| data-orientation | -    | Indicates the orientation of the accordion. |
| data-disabled    | -    | Present when the accordion is disabled.     |



### Item

Groups an accordion header with the corresponding panel.
Renders a \`<div>\` element.

**Item Props:**

| Prop         | Type                                                                                | Default | Description                                                                                                                                                                                  |
| :----------- | :---------------------------------------------------------------------------------- | :------ | :------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| value        | \`AccordionItemValue\`                                                                | -       | -                                                                                                                                                                                            |
| onOpenChange | \`((open: boolean) => void)\`                                                         | -       | Event handler called when the panel is opened or closed.                                                                                                                                     |
| disabled     | \`boolean\`                                                                           | \`false\` | Whether the component should ignore user interaction.                                                                                                                                        |
| className    | \`string \\| ((state: Accordion.Item.State) => string)\`                               | -       | CSS class applied to the element, or a function that&#xA;returns a class based on the component’s state.                                                                                     |
| render       | \`ReactElement \\| ((props: HTMLProps, state: Accordion.Item.State) => ReactElement)\` | -       | Allows you to replace the component’s HTML element&#xA;with a different tag, or compose it with another component.Accepts a \`ReactElement\` or a function that returns the element to render. |

**Item Data Attributes:**

| Attribute     | Type     | Description                                  |
| :------------ | :------- | :------------------------------------------- |
| data-open     | -        | Present when the accordion item is open.     |
| data-disabled | -        | Present when the accordion item is disabled. |
| data-index    | \`number\` | Indicates the index of the accordion item.   |



### Header

A heading that labels the corresponding panel.
Renders an \`<h3>\` element.

**Header Props:**

| Prop      | Type                                                                                | Default | Description                                                                                                                                                                                  |
| :-------- | :---------------------------------------------------------------------------------- | :------ | :------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| className | \`string \\| ((state: Accordion.Item.State) => string)\`                               | -       | CSS class applied to the element, or a function that&#xA;returns a class based on the component’s state.                                                                                     |
| render    | \`ReactElement \\| ((props: HTMLProps, state: Accordion.Item.State) => ReactElement)\` | -       | Allows you to replace the component’s HTML element&#xA;with a different tag, or compose it with another component.Accepts a \`ReactElement\` or a function that returns the element to render. |

**Header Data Attributes:**

| Attribute     | Type     | Description                                  |
| :------------ | :------- | :------------------------------------------- |
| data-open     | -        | Present when the accordion item is open.     |
| data-disabled | -        | Present when the accordion item is disabled. |
| data-index    | \`number\` | Indicates the index of the accordion item.   |



### Trigger

A button that opens and closes the corresponding panel.
Renders a \`<button>\` element.

**Trigger Props:**

| Prop         | Type                                                                                | Default | Description                                                                                                                                                                                  |
| :----------- | :---------------------------------------------------------------------------------- | :------ | :------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| nativeButton | \`boolean\`                                                                           | \`true\`  | Whether the component renders a native \`<button>\` element when replacing it&#xA;via the \`render\` prop.&#xA;Set to \`false\` if the rendered element is not a button (e.g. \`<div>\`).            |
| className    | \`string \\| ((state: Accordion.Item.State) => string)\`                               | -       | CSS class applied to the element, or a function that&#xA;returns a class based on the component’s state.                                                                                     |
| render       | \`ReactElement \\| ((props: HTMLProps, state: Accordion.Item.State) => ReactElement)\` | -       | Allows you to replace the component’s HTML element&#xA;with a different tag, or compose it with another component.Accepts a \`ReactElement\` or a function that returns the element to render. |

**Trigger Data Attributes:**

| Attribute       | Type | Description                                  |
| :-------------- | :--- | :------------------------------------------- |
| data-panel-open | -    | Present when the accordion panel is open.    |
| data-disabled   | -    | Present when the accordion item is disabled. |



### Panel

A collapsible panel with the accordion item contents.
Renders a \`<div>\` element.

**Panel Props:**

| Prop             | Type                                                                                | Default | Description                                                                                                                                                                                                |
| :--------------- | :---------------------------------------------------------------------------------- | :------ | :--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| hiddenUntilFound | \`boolean\`                                                                           | \`false\` | Allows the browser’s built-in page search to find and expand the panel contents.Overrides the \`keepMounted\` prop and uses \`hidden="until-found"\`&#xA;to hide the element without removing it from the DOM. |
| className        | \`string \\| ((state: Accordion.Item.State) => string)\`                               | -       | CSS class applied to the element, or a function that&#xA;returns a class based on the component’s state.                                                                                                   |
| keepMounted      | \`boolean\`                                                                           | \`false\` | Whether to keep the element in the DOM while the panel is closed.&#xA;This prop is ignored when \`hiddenUntilFound\` is used.                                                                                |
| render           | \`ReactElement \\| ((props: HTMLProps, state: Accordion.Item.State) => ReactElement)\` | -       | Allows you to replace the component’s HTML element&#xA;with a different tag, or compose it with another component.Accepts a \`ReactElement\` or a function that returns the element to render.               |

**Panel Data Attributes:**

| Attribute           | Type     | Description                                  |
| :------------------ | :------- | :------------------------------------------- |
| data-open           | -        | Present when the accordion panel is open.    |
| data-orientation    | -        | Indicates the orientation of the accordion.  |
| data-disabled       | -        | Present when the accordion item is disabled. |
| data-index          | \`number\` | Indicates the index of the accordion item.   |
| data-starting-style | -        | Present when the panel is animating in.      |
| data-ending-style   | -        | Present when the panel is animating out.     |

**Panel CSS Variables:**

| Variable                 | Type     | Default | Description                   |
| :----------------------- | :------- | :------ | :---------------------------- |
| --accordion-panel-height | \`number\` | -       | The accordion panel's height. |
| --accordion-panel-width  | \`number\` | -       | The accordion panel's width.  |
"
`;

exports[`mdxToMarkdown > should transform Direction Provider MDX content to markdown with metadata 1`] = `
"# Direction Provider



A direction provider component that enables RTL behavior for Base UI components.

## Demo

### Tailwind

This example shows how to implement the component using Tailwind CSS.

\`\`\`tsx
/* index.tsx */
import * as React from 'react';
import { Slider } from '@base-ui-components/react/slider';
import { DirectionProvider } from '@base-ui-components/react/direction-provider';

export default function ExampleDirectionProvider() {
  return (
    <div dir="rtl">
      <DirectionProvider direction="rtl">
        <Slider.Root defaultValue={25}>
          <Slider.Control className="flex w-56 items-center py-3">
            <Slider.Track className="relative h-1 w-full rounded bg-gray-200 shadow-[inset_0_0_0_1px] shadow-gray-200">
              <Slider.Indicator className="rounded bg-gray-700" />
              <Slider.Thumb className="size-4 rounded-full bg-white outline outline-1 outline-gray-300 focus-visible:outline focus-visible:outline-2 focus-visible:outline-blue-800" />
            </Slider.Track>
          </Slider.Control>
        </Slider.Root>
      </DirectionProvider>
    </div>
  );
}

\`\`\`

### CSS Modules

This example shows how to implement the component using CSS Modules.

\`\`\`css
/* index.module.css */
.Control {
  box-sizing: border-box;
  display: flex;
  align-items: center;
  width: 14rem;
  padding-block: 0.75rem;
}

.Track {
  width: 100%;
  background-color: var(--color-gray-200);
  box-shadow: inset 0 0 0 1px var(--color-gray-200);
  height: 0.25rem;
  border-radius: 0.25rem;
  position: relative;
}

.Indicator {
  border-radius: 0.25rem;
  background-color: var(--color-gray-700);
}

.Thumb {
  width: 1rem;
  height: 1rem;
  border-radius: 100%;
  background-color: white;
  outline: 1px solid var(--color-gray-300);

  &:focus-visible {
    outline: 2px solid var(--color-blue);
  }
}

\`\`\`

\`\`\`tsx
/* index.tsx */
import * as React from 'react';
import { DirectionProvider } from '@base-ui-components/react/direction-provider';
import { Slider } from '@base-ui-components/react/slider';
import styles from './index.module.css';

export default function ExampleDirectionProvider() {
  return (
    <div dir="rtl">
      <DirectionProvider direction="rtl">
        <Slider.Root defaultValue={25}>
          <Slider.Control className={styles.Control}>
            <Slider.Track className={styles.Track}>
              <Slider.Indicator className={styles.Indicator} />
              <Slider.Thumb className={styles.Thumb} />
            </Slider.Track>
          </Slider.Control>
        </Slider.Root>
      </DirectionProvider>
    </div>
  );
}

\`\`\`

## API reference

Import the component and wrap it around your app:

\`\`\`jsx title="Anatomy"
import { DirectionProvider } from '@base-ui-components/react/direction-provider';

// prettier-ignore
<DirectionProvider>
  {/* Your app or a group of components */}
</DirectionProvider>
\`\`\`

Enables RTL behavior for Base UI components.

**DirectionProvider Props:**

| Prop      | Type            | Default | Description                       |
| :-------- | :-------------- | :------ | :-------------------------------- |
| direction | \`TextDirection\` | \`'ltr'\` | The reading direction of the text |
| children  | \`ReactNode\`     | -       | -                                 |
"
`;
