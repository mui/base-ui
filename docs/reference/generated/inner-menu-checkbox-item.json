{
  "name": "InnerMenuCheckboxItem",
  "props": {
    "label": {
      "type": "string",
      "description": "Overrides the text label to use when the item is matched during keyboard text navigation."
    },
    "defaultChecked": {
      "type": "boolean",
      "default": "false",
      "description": "Whether the checkbox item is initially ticked.\n\nTo render a controlled checkbox item, use the `checked` prop instead."
    },
    "checked": {
      "type": "boolean",
      "description": "Whether the checkbox item is currently ticked.\n\nTo render an uncontrolled checkbox item, use the `defaultChecked` prop instead."
    },
    "onCheckedChange": {
      "type": "((checked: boolean, event: Event) => void)",
      "description": "Event handler called when the checkbox item is ticked or unticked."
    },
    "onClick": {
      "type": "React.MouseEventHandler<HTMLElement>",
      "description": "The click handler for the menu item."
    },
    "closeOnClick": {
      "type": "boolean",
      "required": true
    },
    "allowMouseUpTriggerRef": {
      "type": "React.RefObject",
      "required": true
    },
    "highlighted": {
      "type": "boolean",
      "required": true
    },
    "itemProps": {
      "type": "GenericHTMLProps",
      "required": true
    },
    "menuEvents": {
      "type": "\"D:/Development/MUI/base-ui/node_modules/.pnpm/@floating-ui+react@0.27.5_react-dom@19.0.0_react@19.0.0__react@19.0.0/node_modules/@floating-ui/react/dist/floating-ui.react\".FloatingEvents",
      "required": true
    },
    "typingRef": {
      "type": "React.RefObject",
      "required": true
    },
    "disabled": {
      "type": "boolean",
      "default": "false",
      "description": "Whether the component should ignore user interaction."
    },
    "id": {
      "type": "string"
    },
    "children": {
      "type": "React.ReactNode"
    },
    "className": {
      "type": "string | ((state: State) => string)",
      "description": "CSS class applied to the element, or a function that\nreturns a class based on the component’s state."
    },
    "render": {
      "type": "React.ReactElement | ((props: GenericHTMLProps, state: State) => React.ReactElement)",
      "description": "Allows you to replace the component’s HTML element\nwith a different tag, or compose it with another component.\n\nAccepts a `ReactElement` or a function that returns the element to render."
    }
  },
  "dataAttributes": {},
  "cssVariables": {}
}
