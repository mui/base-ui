{
  "name": "useRender",
  "description": "Renders a Base UI element.",
  "parameters": {
    "render": {
      "type": "useRender.RenderProp<Record<string, unknown>>",
      "required": true,
      "description": "The React element or a function that returns one to override the default element."
    },
    "ref": {
      "type": "Ref<Element> | Ref<Element>[]",
      "description": "The ref to apply to the rendered element.",
      "detailedType": "React.Ref<Element> | Ref<Element>[] | undefined"
    },
    "state": {
      "type": "Record<string, unknown>",
      "description": "The state of the component, passed as the second argument to the `render` callback.\nState properties are automatically converted to data-* attributes.",
      "detailedType": "Record<string, unknown> | undefined"
    },
    "stateAttributesMapping": {
      "type": "CustomStyleHookMapping<Record<string, unknown>>",
      "description": "Custom mapping for converting state properties to data-* attributes.",
      "example": "{ isActive: (value) => (value ? { 'data-is-active': '' } : null) }",
      "detailedType": "{} | undefined"
    },
    "props": {
      "type": "Record<string, unknown>",
      "description": "Props to be spread on the rendered element.\nThey are merged with the internal props of the component, so that event handlers\nare merged, `className` strings and `style` properties are joined, while other external props overwrite the\ninternal ones.",
      "detailedType": "Record<string, unknown> | undefined"
    },
    "enabled": {
      "type": "boolean | undefined",
      "default": "true",
      "description": "If `false`, the hook will skip most of its internal logic and return `null`.\nThis is useful for rendering a component conditionally.",
      "detailedType": "boolean | undefined | undefined"
    }
  },
  "returnValue": "ReactElement | null"
}
