{
  "name": "Toggle",
  "description": "A two-state button that can be on or off.\nRenders a `<button>` element.",
  "props": {
    "value": {
      "type": "string",
      "description": "A unique string that identifies the toggle when used\ninside a toggle group."
    },
    "defaultPressed": {
      "type": "boolean",
      "default": "false",
      "description": "Whether the toggle button is currently pressed.\nThis is the uncontrolled counterpart of `pressed`."
    },
    "pressed": {
      "type": "boolean",
      "description": "Whether the toggle button is currently pressed.\nThis is the controlled counterpart of `defaultPressed`."
    },
    "onPressedChange": {
      "type": "((pressed: boolean, event: Event) => void)",
      "description": "Callback fired when the pressed state is changed."
    },
    "nativeButton": {
      "type": "boolean",
      "default": "true",
      "description": "Whether the component renders a native `<button>` element when replacing it\nvia the `render` prop.\nSet to `false` if the rendered element is not a button (e.g. `<div>`)."
    },
    "disabled": {
      "type": "boolean",
      "default": "false",
      "description": "Whether the component should ignore user interaction."
    },
    "className": {
      "type": "string | ((state: Toggle.State) => string)",
      "description": "CSS class applied to the element, or a function that\nreturns a class based on the component’s state."
    },
    "render": {
      "type": "ReactElement | ((props: HTMLProps, state: Toggle.State) => ReactElement)",
      "description": "Allows you to replace the component’s HTML element\nwith a different tag, or compose it with another component.\n\nAccepts a `ReactElement` or a function that returns the element to render."
    }
  },
  "dataAttributes": {
    "data-pressed": {
      "description": "Present when the toggle button is pressed."
    }
  },
  "cssVariables": {}
}
