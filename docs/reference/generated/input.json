{
  "name": "Input",
  "description": "A native input element that automatically works with [Field](https://base-ui.com/react/components/field).\nRenders an `<input>` element.",
  "props": {
    "defaultValue": {
      "type": "string | number | string[]",
      "detailedType": "string | number | string[] | undefined"
    },
    "onValueChange": {
      "type": "((value: string, eventDetails: Field.Control.ChangeEventDetails) => void)",
      "description": "Callback fired when the `value` changes. Use when controlled.",
      "detailedType": "| ((\n    value: string,\n    eventDetails: Field.Control.ChangeEventDetails,\n  ) => void)\n| undefined"
    },
    "style": {
      "type": "CSSProperties | ((state: Input.State) => CSSProperties | undefined)",
      "detailedType": "| React.CSSProperties\n| ((state: Input.State) => CSSProperties | undefined)\n| undefined"
    },
    "className": {
      "type": "string | ((state: Input.State) => string | undefined)",
      "description": "CSS class applied to the element, or a function that\nreturns a class based on the component’s state.",
      "detailedType": "| string\n| ((state: Input.State) => string | undefined)"
    },
    "render": {
      "type": "ReactElement | ((props: HTMLProps, state: Input.State) => ReactElement)",
      "description": "Allows you to replace the component’s HTML element\nwith a different tag, or compose it with another component.\n\nAccepts a `ReactElement` or a function that returns the element to render.",
      "detailedType": "| ReactElement\n| ((props: HTMLProps, state: Input.State) => ReactElement)"
    }
  },
  "dataAttributes": {
    "data-disabled": {
      "description": "Present when the input is disabled."
    },
    "data-valid": {
      "description": "Present when the input is in valid state (when wrapped in Field.Root)."
    },
    "data-invalid": {
      "description": "Present when the input is in invalid state (when wrapped in Field.Root)."
    },
    "data-dirty": {
      "description": "Present when the input's value has changed (when wrapped in Field.Root)."
    },
    "data-touched": {
      "description": "Present when the input has been touched (when wrapped in Field.Root)."
    },
    "data-filled": {
      "description": "Present when the input is filled (when wrapped in Field.Root)."
    },
    "data-focused": {
      "description": "Present when the input is focused (when wrapped in Field.Root)."
    }
  },
  "cssVariables": {}
}
