{
  "name": "SelectRoot",
  "description": "Groups all parts of the select.\nDoesn’t render its own HTML element.",
  "props": {
    "name": {
      "type": "string",
      "description": "Identifies the field when a form is submitted.",
      "detailedType": "string | undefined"
    },
    "defaultValue": {
      "type": "Value[] | Value | null",
      "default": "null",
      "description": "The uncontrolled value of the select when it’s initially rendered.\n\nTo render a controlled select, use the `value` prop instead.",
      "detailedType": "Value[] | Value | null | undefined"
    },
    "value": {
      "type": "Value[] | Value",
      "description": "The value of the select. Use when controlled.",
      "detailedType": "Value[] | Value | undefined"
    },
    "onValueChange": {
      "type": "((value: Value[] | Value, eventDetails: Select.Root.ChangeEventDetails) => void) | ((value: Value[] | Value | any | null, eventDetails: Select.Root.ChangeEventDetails) => void)",
      "description": "Event handler called when the value of the select changes.",
      "detailedType": "| ((\n    value: Value[] | Value,\n    eventDetails: Select.Root.ChangeEventDetails,\n  ) => void)\n| ((\n    value: Value[] | Value | any | null,\n    eventDetails: Select.Root.ChangeEventDetails,\n  ) => void)\n| undefined"
    },
    "defaultOpen": {
      "type": "boolean",
      "default": "false",
      "description": "Whether the select popup is initially open.\n\nTo render a controlled select popup, use the `open` prop instead.",
      "detailedType": "boolean | undefined"
    },
    "open": {
      "type": "boolean",
      "description": "Whether the select popup is currently open.",
      "detailedType": "boolean | undefined"
    },
    "onOpenChange": {
      "type": "((open: boolean, eventDetails: Select.Root.ChangeEventDetails) => void)",
      "description": "Event handler called when the select popup is opened or closed.",
      "detailedType": "| ((\n    open: boolean,\n    eventDetails: Select.Root.ChangeEventDetails,\n  ) => void)\n| undefined"
    },
    "actionsRef": {
      "type": "RefObject<Select.Root.Actions>",
      "description": "A ref to imperative actions.\n- `unmount`: When specified, the select will not be unmounted when closed.\nInstead, the `unmount` function must be called to unmount the select manually.\nUseful when the select's animation is controlled by an external library.",
      "detailedType": "React.RefObject<Select.Root.Actions> | undefined"
    },
    "isItemEqualToValue": {
      "type": "((itemValue: Value, value: Value) => boolean)",
      "description": "Custom comparison logic used to determine if a select item value matches the current selected value. Useful when item values are objects without matching referentially.\nDefaults to `Object.is` comparison.",
      "detailedType": "| ((itemValue: Value, value: Value) => boolean)\n| undefined"
    },
    "itemToStringLabel": {
      "type": "((itemValue: Value) => string)",
      "description": "When the item values are objects (`<Select.Item value={object}>`), this function converts the object value to a string representation for display in the trigger.\nIf the shape of the object is `{ value, label }`, the label will be used automatically without needing to specify this prop.",
      "detailedType": "((itemValue: Value) => string) | undefined"
    },
    "itemToStringValue": {
      "type": "((itemValue: Value) => string)",
      "description": "When the item values are objects (`<Select.Item value={object}>`), this function converts the object value to a string representation for form submission.\nIf the shape of the object is `{ value, label }`, the value will be used automatically without needing to specify this prop.",
      "detailedType": "((itemValue: Value) => string) | undefined"
    },
    "items": {
      "type": "Record<string, ReactNode> | ({ label: ReactNode, value: Value })[]",
      "description": "Data structure of the items rendered in the select popup.\nWhen specified, `<Select.Value>` renders the label of the selected item instead of the raw value.",
      "example": "```tsx\nconst items = {\n  sans: 'Sans-serif',\n  serif: 'Serif',\n  mono: 'Monospace',\n  cursive: 'Cursive',\n};\n<Select.Root items={items} />\n```",
      "detailedType": "| Record<string, ReactNode>\n| { label: ReactNode; value: Value }[]\n| undefined"
    },
    "modal": {
      "type": "boolean",
      "default": "true",
      "description": "Determines if the select enters a modal state when open.\n- `true`: user interaction is limited to the select: document page scroll is locked and and pointer interactions on outside elements are disabled.\n- `false`: user interaction with the rest of the document is allowed.",
      "detailedType": "boolean | undefined"
    },
    "multiple": {
      "type": "boolean | undefined",
      "default": "false",
      "description": "Whether multiple items can be selected.",
      "detailedType": "boolean | undefined"
    },
    "onOpenChangeComplete": {
      "type": "((open: boolean) => void)",
      "description": "Event handler called after any animations complete when the select popup is opened or closed.",
      "detailedType": "((open: boolean) => void) | undefined"
    },
    "disabled": {
      "type": "boolean",
      "default": "false",
      "description": "Whether the component should ignore user interaction.",
      "detailedType": "boolean | undefined"
    },
    "readOnly": {
      "type": "boolean",
      "default": "false",
      "description": "Whether the user should be unable to choose a different option from the select popup.",
      "detailedType": "boolean | undefined"
    },
    "required": {
      "type": "boolean",
      "default": "false",
      "description": "Whether the user must choose a value before submitting a form.",
      "detailedType": "boolean | undefined"
    },
    "inputRef": {
      "type": "Ref<HTMLInputElement>",
      "description": "A ref to access the hidden input element.",
      "detailedType": "React.Ref<HTMLInputElement> | undefined"
    },
    "id": {
      "type": "string",
      "description": "The id of the Select.",
      "detailedType": "string | undefined"
    },
    "children": {
      "type": "ReactNode",
      "detailedType": "React.ReactNode | undefined"
    }
  },
  "dataAttributes": {},
  "cssVariables": {}
}
