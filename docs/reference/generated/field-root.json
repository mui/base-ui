{
  "name": "FieldRoot",
  "description": "Groups all parts of the field.\nRenders a `<div>` element.",
  "props": {
    "name": {
      "type": "string",
      "description": "Identifies the field when a form is submitted.\nTakes precedence over the `name` prop on the `<Field.Control>` component."
    },
    "disabled": {
      "type": "boolean",
      "default": "false",
      "description": "Whether the component should ignore user interaction.\nTakes precedence over the `disabled` prop on the `<Field.Control>` component."
    },
    "invalid": {
      "type": "boolean",
      "description": "Whether the field is forcefully marked as invalid."
    },
    "validate": {
      "type": "((value: unknown) => string | string[] | Promise<string | string[] | null> | null)",
      "description": "A function for custom validation. Return a string or an array of strings with\nthe error message(s) if the value is invalid, or `null` if the value is valid."
    },
    "validationMode": {
      "type": "'onBlur' | 'onChange'",
      "default": "'onBlur'",
      "description": "Determines when the field should be validated.\n\n- **onBlur** triggers validation when the control loses focus\n- **onChange** triggers validation on every change to the control value"
    },
    "validationDebounceTime": {
      "type": "number",
      "default": "0",
      "description": "How long to wait between `validate` callbacks if\n`validationMode=\"onChange\"` is used. Specified in milliseconds."
    },
    "className": {
      "type": "string | ((state: Field.Root.State) => string)",
      "description": "CSS class applied to the element, or a function that\nreturns a class based on the component’s state."
    },
    "render": {
      "type": "ReactElement | ((props: HTMLProps, state: Field.Root.State) => ReactElement)",
      "description": "Allows you to replace the component’s HTML element\nwith a different tag, or compose it with another component.\n\nAccepts a `ReactElement` or a function that returns the element to render."
    }
  },
  "dataAttributes": {
    "data-disabled": {
      "description": "Present when the field is disabled."
    },
    "data-valid": {
      "description": "Present when the field is valid."
    },
    "data-invalid": {
      "description": "Present when the field is invalid."
    },
    "data-dirty": {
      "description": "Present when the field's value has changed."
    },
    "data-touched": {
      "description": "Present when the field has been touched."
    },
    "data-filled": {
      "description": "Present when the field is filled."
    },
    "data-focused": {
      "description": "Present when the field control is focused."
    }
  },
  "cssVariables": {}
}
