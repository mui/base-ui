{
  "name": "FieldRoot",
  "description": "Groups all parts of the field.\nRenders a `<div>` element.",
  "props": {
    "className": {
      "type": "string | (state) => string",
      "description": "CSS class applied to the element, or a function that\nreturns a class based on the component’s state."
    },
    "disabled": {
      "type": "boolean",
      "default": "false",
      "description": "Whether the component should ignore user actions.\nTakes precedence over the `disabled` prop on the `<Field.Control>` component."
    },
    "invalid": {
      "type": "boolean",
      "description": "Whether the field is forcefully marked as invalid."
    },
    "name": {
      "type": "string",
      "description": "Identifies the field when a form is submitted.\nTakes precedence over the `name` prop on the `<Field.Control>` component."
    },
    "render": {
      "type": "React.ReactElement | (props, state) => React.ReactElement",
      "description": "Allows you to replace the component’s HTML element\nwith a different tag, or compose it with another component.\n\nAccepts a `ReactElement` or a function that returns the element to render."
    },
    "validate": {
      "type": "(value) => string | string[] | null | Promise",
      "description": "Function to custom-validate the field's value. Return a string or array of strings with error\nmessages if the value is invalid, or `null` if the value is valid. The function can also return\na promise that resolves to a string, array of strings, or `null`."
    },
    "validationDebounceTime": {
      "type": "number",
      "default": "0",
      "description": "The debounce time in milliseconds for the `validate` function in `onChange` phase."
    },
    "validationMode": {
      "type": "'onBlur' | 'onChange'",
      "default": "'onBlur'",
      "description": "Determines when validation should be triggered."
    }
  },
  "dataAttributes": {
    "data-dirty": {
      "description": "Present when the field's value has changed."
    },
    "data-disabled": {
      "description": "Present when the field is disabled."
    },
    "data-touched": {
      "description": "Present when the field has been thouched."
    }
  }
}
