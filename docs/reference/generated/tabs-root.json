{
  "name": "TabsRoot",
  "description": "Groups the tabs and the corresponding panels.\nRenders a `<div>` element.",
  "props": {
    "defaultValue": {
      "type": "Tabs.Tab.Value",
      "default": "0",
      "description": "The default value. Use when the component is not controlled.\nWhen the value is `null`, no Tab will be active."
    },
    "value": {
      "type": "Tabs.Tab.Value",
      "description": "The value of the currently active `Tab`. Use when the component is controlled.\nWhen the value is `null`, no Tab will be active."
    },
    "onValueChange": {
      "type": "((value: Tabs.Tab.Value, eventDetails: { reason: 'none', event: ReasonToEvent, cancel: (() => void), allowPropagation: (() => void), isCanceled: boolean, isPropagationAllowed: boolean, trigger: HTMLElement | undefined } & { activationDirection: Tabs.Tab.ActivationDirection }) => void)",
      "description": "Callback invoked when new value is being set.",
      "detailedType": "| ((\n    value: Tabs.Tab.Value,\n    eventDetails: {\n      reason: 'none'\n      event: ReasonToEvent\n      cancel: () => void\n      allowPropagation: () => void\n      isCanceled: boolean\n      isPropagationAllowed: boolean\n      trigger: HTMLElement | undefined\n    } & {\n      activationDirection: Tabs.Tab.ActivationDirection\n    },\n  ) => void)\n| undefined"
    },
    "style": {
      "type": "CSSProperties | ((state: Tabs.Root.State) => CSSProperties | undefined)",
      "detailedType": "| React.CSSProperties\n| ((state: Tabs.Root.State) => CSSProperties | undefined)\n| undefined"
    },
    "orientation": {
      "type": "Tabs.Root.Orientation",
      "default": "'horizontal'",
      "description": "The component orientation (layout flow direction).",
      "detailedType": "'horizontal' | 'vertical' | undefined"
    },
    "className": {
      "type": "string | ((state: Tabs.Root.State) => string | undefined)",
      "description": "CSS class applied to the element, or a function that\nreturns a class based on the component’s state.",
      "detailedType": "| string\n| ((state: Tabs.Root.State) => string | undefined)"
    },
    "render": {
      "type": "ReactElement | ((props: HTMLProps, state: Tabs.Root.State) => ReactElement)",
      "description": "Allows you to replace the component’s HTML element\nwith a different tag, or compose it with another component.\n\nAccepts a `ReactElement` or a function that returns the element to render.",
      "detailedType": "| ReactElement\n| ((\n    props: HTMLProps,\n    state: Tabs.Root.State,\n  ) => ReactElement)"
    }
  },
  "dataAttributes": {
    "data-orientation": {
      "description": "Indicates the orientation of the tabs.",
      "type": "'horizontal' | 'vertical'"
    },
    "data-activation-direction": {
      "description": "Indicates the direction of the activation (based on the previous active tab).",
      "type": "'left' | 'right' | 'up' | 'down' | 'none'"
    }
  },
  "cssVariables": {}
}
