{
  "name": "InnerSelectItem",
  "props": {
    "label": {
      "type": "string",
      "description": "Overrides the text label to use on the trigger when this item is selected\nand when the item is matched during keyboard text navigation."
    },
    "value": {
      "type": "any",
      "required": true
    },
    "open": {
      "type": "boolean",
      "required": true
    },
    "getRootItemProps": {
      "type": "__type",
      "required": true
    },
    "highlighted": {
      "type": "boolean",
      "required": true
    },
    "indexRef": {
      "type": "React.RefObject",
      "required": true
    },
    "popupRef": {
      "type": "React.RefObject",
      "required": true
    },
    "selected": {
      "type": "boolean",
      "required": true
    },
    "selectedIndexRef": {
      "type": "React.RefObject",
      "required": true
    },
    "selectionRef": {
      "type": "React.MutableRefObject",
      "required": true
    },
    "setActiveIndex": {
      "type": "React.Dispatch<React.SetStateAction<number | null>>",
      "required": true
    },
    "setOpen": {
      "type": "((nextOpen: boolean, event: Event | undefined) => void)",
      "required": true
    },
    "setValue": {
      "type": "((nextValue: any, event: Event | undefined) => void)",
      "required": true
    },
    "typingRef": {
      "type": "React.MutableRefObject",
      "required": true
    },
    "disabled": {
      "type": "boolean",
      "default": "false",
      "description": "Whether the component should ignore user interaction."
    },
    "children": {
      "type": "React.ReactNode"
    },
    "className": {
      "type": "string | ((state: State) => string)",
      "description": "CSS class applied to the element, or a function that\nreturns a class based on the component’s state."
    },
    "render": {
      "type": "React.ReactElement | ((props: GenericHTMLProps, state: State) => React.ReactElement)",
      "description": "Allows you to replace the component’s HTML element\nwith a different tag, or compose it with another component.\n\nAccepts a `ReactElement` or a function that returns the element to render."
    }
  },
  "dataAttributes": {},
  "cssVariables": {}
}
