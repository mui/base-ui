{
  "name": "Form",
  "description": "A native form element with consolidated error handling.\nRenders a `<form>` element.",
  "props": {
    "errors": {
      "type": "Errors",
      "description": "An object where the keys correspond to the `name` attribute of the form fields,\nand the values correspond to the error(s) related to that field.",
      "detailedType": "{} | undefined"
    },
    "onClearErrors": {
      "type": "((errors: Errors) => void)",
      "description": "Event handler called when the `errors` object is cleared.",
      "detailedType": "((errors: Errors) => void) | undefined"
    },
    "style": {
      "type": "CSSProperties | ((state: Form.State) => CSSProperties | undefined)",
      "detailedType": "| React.CSSProperties\n| ((state: Form.State) => CSSProperties | undefined)\n| undefined"
    },
    "validationMode": {
      "type": "FormValidationMode",
      "default": "'onSubmit'",
      "description": "Determines when the form should be validated.\nThe `validationMode` prop on `<Field.Root>` takes precedence over this.\n\n- `onSubmit` (default): validates the field when the form is submitted, afterwards fields will re-validate on change.\n- `onBlur`: validates a field when it loses focus.\n- `onChange`: validates the field on every change to its value.",
      "detailedType": "'onBlur' | 'onChange' | 'onSubmit' | undefined"
    },
    "className": {
      "type": "string | ((state: Form.State) => string | undefined)",
      "description": "CSS class applied to the element, or a function that\nreturns a class based on the component’s state."
    },
    "render": {
      "type": "ReactElement | ((props: HTMLProps, state: Form.State) => ReactElement)",
      "description": "Allows you to replace the component’s HTML element\nwith a different tag, or compose it with another component.\n\nAccepts a `ReactElement` or a function that returns the element to render.",
      "detailedType": "| ReactElement\n| ((props: HTMLProps, state: Form.State) => ReactElement)"
    }
  },
  "dataAttributes": {},
  "cssVariables": {}
}
