{
  "name": "PopoverRoot",
  "description": "Groups all parts of the popover.\nDoesnâ€™t render its own HTML element.",
  "props": {
    "defaultOpen": {
      "type": "boolean",
      "description": "Whether the popover is initially open.\nTo render a controlled popover, use the `open` prop instead.",
      "detailedType": "boolean | undefined"
    },
    "open": {
      "type": "boolean",
      "description": "Whether the popover is currently open.",
      "detailedType": "boolean | undefined"
    },
    "onOpenChange": {
      "type": "((open: boolean, eventDetails: Popover.Root.ChangeEventDetails) => void)",
      "description": "Event handler called when the popover is opened or closed.",
      "detailedType": "| ((\n    open: boolean,\n    eventDetails: Popover.Root.ChangeEventDetails,\n  ) => void)\n| undefined"
    },
    "actionsRef": {
      "type": "RefObject<Popover.Root.Actions | null>",
      "description": "A ref to imperative actions.\n- `unmount`: When specified, the popover will not be unmounted when closed.\nInstead, the `unmount` function must be called to unmount the popover manually.\nUseful when the popover's animation is controlled by an external library.",
      "detailedType": "| React.RefObject<Popover.Root.Actions | null>\n| undefined"
    },
    "defaultTriggerId": {
      "type": "string | null",
      "description": "ID of the trigger that the popover is associated with.\nThis is useful in conjuntion with the `defaultOpen` prop to create an initially open popover.",
      "detailedType": "string | null | undefined"
    },
    "handle": {
      "type": "PopoverStore<Payload>",
      "description": "A handle to associate the popover with a trigger.\nIf specified, allows external triggers to control the popover's open state.",
      "detailedType": "{} | undefined"
    },
    "modal": {
      "type": "boolean | 'trap-focus'",
      "default": "false",
      "description": "Determines if the popover enters a modal state when open.\n- `true`: user interaction is limited to the popover: document page scroll is locked, and pointer interactions on outside elements are disabled.\n- `false`: user interaction with the rest of the document is allowed.\n- `'trap-focus'`: focus is trapped inside the popover, but document page scroll is not locked and pointer interactions outside of it remain enabled.",
      "detailedType": "boolean | 'trap-focus' | undefined"
    },
    "onOpenChangeComplete": {
      "type": "((open: boolean) => void)",
      "description": "Event handler called after any animations complete when the popover is opened or closed.",
      "detailedType": "((open: boolean) => void) | undefined"
    },
    "triggerId": {
      "type": "string | null",
      "description": "ID of the trigger that the popover is associated with.\nThis is useful in conjuntion with the `open` prop to create a controlled popover.\nThere's no need to specify this prop when the popover is uncontrolled (i.e. when the `open` prop is not set).",
      "detailedType": "string | null | undefined"
    },
    "children": {
      "type": "ReactNode | Popover.Root.ChildRenderFunction<Payload>",
      "description": "The content of the popover.\nThis can be a regular React node or a render function that receives the `payload` of the active trigger.",
      "detailedType": "| React.ReactNode\n| ((arg: { payload: Payload | undefined }) => ReactNode)"
    }
  },
  "dataAttributes": {},
  "cssVariables": {}
}
