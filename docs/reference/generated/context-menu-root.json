{
  "name": "ContextMenuRoot",
  "description": "A component that creates a context menu activated by right clicking or long pressing.\nDoesnâ€™t render its own HTML element.",
  "props": {
    "defaultOpen": {
      "type": "boolean",
      "default": "false",
      "description": "Whether the menu is initially open.\n\nTo render a controlled menu, use the `open` prop instead.",
      "detailedType": "boolean | undefined"
    },
    "open": {
      "type": "boolean",
      "description": "Whether the menu is currently open.",
      "detailedType": "boolean | undefined"
    },
    "onOpenChange": {
      "type": "((open: boolean, event: Event | undefined, reason: Menu.Root.OpenChangeReason | undefined) => void)",
      "description": "Event handler called when the menu is opened or closed.",
      "detailedType": "| ((\n    open: boolean,\n    event: Event | undefined,\n    reason: Menu.Root.OpenChangeReason | undefined,\n  ) => void)\n| undefined"
    },
    "actionsRef": {
      "type": "RefObject<Menu.Root.Actions>",
      "description": "A ref to imperative actions.\n- `unmount`: When specified, the menu will not be unmounted when closed.\nInstead, the `unmount` function must be called to unmount the menu manually.\nUseful when the menu's animation is controlled by an external library.",
      "detailedType": "React.RefObject<Menu.Root.Actions> | undefined"
    },
    "closeParentOnEsc": {
      "type": "boolean",
      "default": "true",
      "description": "When in a submenu, determines whether pressing the Escape key\ncloses the entire menu, or only the current child menu.",
      "detailedType": "boolean | undefined"
    },
    "onOpenChangeComplete": {
      "type": "((open: boolean) => void)",
      "description": "Event handler called after any animations complete when the menu is closed.",
      "detailedType": "((open: boolean) => void) | undefined"
    },
    "disabled": {
      "type": "boolean",
      "default": "false",
      "description": "Whether the component should ignore user interaction.",
      "detailedType": "boolean | undefined"
    },
    "loop": {
      "type": "boolean",
      "default": "true",
      "description": "Whether to loop keyboard focus back to the first item\nwhen the end of the list is reached while using the arrow keys.",
      "detailedType": "boolean | undefined"
    },
    "orientation": {
      "type": "Menu.Root.Orientation",
      "default": "'vertical'",
      "description": "The visual orientation of the menu.\nControls whether roving focus uses up/down or left/right arrow keys.",
      "detailedType": "'horizontal' | 'vertical' | undefined"
    },
    "children": {
      "type": "ReactNode",
      "required": true,
      "detailedType": "React.ReactNode"
    }
  },
  "dataAttributes": {},
  "cssVariables": {}
}
