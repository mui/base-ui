{
  "name": "AlertDialogRoot",
  "description": "Groups all parts of the alert dialog.\nDoesnâ€™t render its own HTML element.",
  "props": {
    "defaultOpen": {
      "type": "boolean",
      "default": "false",
      "description": "Whether the dialog is initially open.\n\nTo render a controlled dialog, use the `open` prop instead.",
      "detailedType": "boolean | undefined"
    },
    "open": {
      "type": "boolean",
      "description": "Whether the dialog is currently open.",
      "detailedType": "boolean | undefined"
    },
    "onOpenChange": {
      "type": "((open: boolean, eventDetails: AlertDialog.Root.ChangeEventDetails) => void)",
      "description": "Event handler called when the dialog is opened or closed.",
      "detailedType": "| ((\n    open: boolean,\n    eventDetails: AlertDialog.Root.ChangeEventDetails,\n  ) => void)\n| undefined"
    },
    "actionsRef": {
      "type": "RefObject<AlertDialog.Root.Actions>",
      "description": "A ref to imperative actions.\n- `unmount`: When specified, the dialog will not be unmounted when closed.\nInstead, the `unmount` function must be called to unmount the dialog manually.\nUseful when the dialog's animation is controlled by an external library.",
      "detailedType": "| React.RefObject<AlertDialog.Root.Actions>\n| undefined"
    },
    "defaultTriggerId": {
      "type": "string | null",
      "description": "ID of the trigger that the dialog is associated with.\nThis is useful in conjunction with the `defaultOpen` prop to create an initially open dialog.",
      "detailedType": "string | null | undefined"
    },
    "handle": {
      "type": "DialogHandle<Payload>",
      "description": "A handle to associate the popover with a trigger.\nIf specified, allows external triggers to control the popover's open state.\nCan be created with the AlertDialog.createHandle() method.",
      "detailedType": "{} | undefined"
    },
    "onOpenChangeComplete": {
      "type": "((open: boolean) => void)",
      "description": "Event handler called after any animations complete when the dialog is opened or closed.",
      "detailedType": "((open: boolean) => void) | undefined"
    },
    "triggerId": {
      "type": "string | null",
      "description": "ID of the trigger that the dialog is associated with.\nThis is useful in conjuntion with the `open` prop to create a controlled dialog.\nThere's no need to specify this prop when the popover is uncontrolled (i.e. when the `open` prop is not set).",
      "detailedType": "string | null | undefined"
    },
    "children": {
      "type": "ReactNode | PayloadChildRenderFunction<Payload>",
      "description": "The content of the dialog.\nThis can be a regular React node or a render function that receives the `payload` of the active trigger.",
      "detailedType": "| React.ReactNode\n| ((arg: { payload: Payload | undefined }) => ReactNode)"
    }
  },
  "dataAttributes": {},
  "cssVariables": {}
}
