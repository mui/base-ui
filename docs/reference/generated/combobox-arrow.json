{
  "name": "ComboboxArrow",
  "description": "Displays an element positioned against the anchor.\nRenders a `<div>` element.",
  "props": {
    "className": {
      "type": "string | ((state: Combobox.Arrow.State) => string)",
      "description": "CSS class applied to the element, or a function that\nreturns a class based on the component’s state."
    },
    "render": {
      "type": "ReactElement | ((props: HTMLProps, state: Combobox.Arrow.State) => ReactElement)",
      "description": "Allows you to replace the component’s HTML element\nwith a different tag, or compose it with another component.\n\nAccepts a `ReactElement` or a function that returns the element to render.",
      "detailedType": "| ReactElement\n| ((\n    props: HTMLProps,\n    state: Combobox.Arrow.State,\n  ) => ReactElement)"
    }
  },
  "dataAttributes": {
    "data-open": {
      "description": "Present when the popup is open."
    },
    "data-closed": {
      "description": "Present when the popup is closed."
    },
    "data-uncentered": {
      "description": "Present when the arrow is uncentered."
    },
    "data-anchor-hidden": {
      "description": "Present when the anchor is hidden."
    },
    "data-align": {
      "description": "Indicates how the popup is aligned relative to specified side.",
      "type": "'start' | 'center' | 'end'"
    },
    "data-side": {
      "description": "Indicates which side the popup is positioned relative to the trigger.",
      "type": "'top' | 'bottom' | 'left' | 'right' | 'inline-end' | 'inline-start'"
    }
  },
  "cssVariables": {}
}
