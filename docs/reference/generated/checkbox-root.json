{
  "name": "CheckboxRoot",
  "description": "Represents the checkbox itself.\nRenders a `<button>` element and a hidden `<input>` beside.",
  "props": {
    "name": {
      "type": "string",
      "expanded": "string | undefined",
      "default": "undefined",
      "description": "Identifies the field when a form is submitted."
    },
    "defaultChecked": {
      "type": "boolean",
      "expanded": "boolean | undefined",
      "default": "false",
      "description": "Whether the checkbox is initially ticked.\n\nTo render a controlled checkbox, use the `checked` prop instead."
    },
    "checked": {
      "type": "boolean",
      "expanded": "boolean | undefined",
      "default": "undefined",
      "description": "Whether the checkbox is currently ticked.\n\nTo render an uncontrolled checkbox, use the `defaultChecked` prop instead."
    },
    "onCheckedChange": {
      "type": "((checked: boolean, event: Event) => void)",
      "expanded": "| ((checked: boolean, event: Event) => void)\n| undefined",
      "description": "Event handler called when the checkbox is ticked or unticked."
    },
    "indeterminate": {
      "type": "boolean",
      "expanded": "boolean | undefined",
      "default": "false",
      "description": "Whether the checkbox is in a mixed state: neither ticked, nor unticked."
    },
    "value": {
      "type": "string",
      "expanded": "string | undefined",
      "description": "The value of the selected checkbox."
    },
    "nativeButton": {
      "type": "boolean",
      "expanded": "boolean | undefined",
      "default": "true",
      "description": "Whether the component renders a native `<button>` element when replacing it\nvia the `render` prop.\nSet to `false` if the rendered element is not a button (e.g. `<div>`)."
    },
    "parent": {
      "type": "boolean",
      "expanded": "boolean | undefined",
      "default": "false",
      "description": "Whether the checkbox controls a group of child checkboxes.\n\nMust be used in a [Checkbox Group](https://base-ui.com/react/components/checkbox-group)."
    },
    "disabled": {
      "type": "boolean",
      "expanded": "boolean | undefined",
      "default": "false",
      "description": "Whether the component should ignore user interaction."
    },
    "readOnly": {
      "type": "boolean",
      "expanded": "boolean | undefined",
      "default": "false",
      "description": "Whether the user should be unable to tick or untick the checkbox."
    },
    "required": {
      "type": "boolean",
      "expanded": "boolean | undefined",
      "default": "false",
      "description": "Whether the user must tick the checkbox before submitting a form."
    },
    "inputRef": {
      "type": "Ref<HTMLInputElement>",
      "expanded": "React.Ref<HTMLInputElement> | undefined",
      "description": "A ref to access the hidden `<input>` element."
    },
    "id": {
      "type": "string",
      "expanded": "string | undefined",
      "description": "The id of the input element."
    },
    "className": {
      "type": "string | ((state: Checkbox.Root.State) => string)",
      "expanded": "string | ((state: Checkbox.Root.State) => string)",
      "description": "CSS class applied to the element, or a function that\nreturns a class based on the component’s state."
    },
    "render": {
      "type": "ReactElement | ((props: HTMLProps, state: Checkbox.Root.State) => ReactElement)",
      "expanded": "| ReactElement\n| ((\n    props: HTMLProps,\n    state: Checkbox.Root.State,\n  ) => ReactElement)",
      "description": "Allows you to replace the component’s HTML element\nwith a different tag, or compose it with another component.\n\nAccepts a `ReactElement` or a function that returns the element to render."
    }
  },
  "dataAttributes": {
    "data-checked": {
      "description": "Present when the checkbox is checked."
    },
    "data-unchecked": {
      "description": "Present when the checkbox is not checked."
    },
    "data-disabled": {
      "description": "Present when the checkbox is disabled."
    },
    "data-readonly": {
      "description": "Present when the checkbox is readonly."
    },
    "data-required": {
      "description": "Present when the checkbox is required."
    },
    "data-valid": {
      "description": "Present when the checkbox is in valid state (when wrapped in Field.Root)."
    },
    "data-invalid": {
      "description": "Present when the checkbox is in invalid state (when wrapped in Field.Root)."
    },
    "data-dirty": {
      "description": "Present when the checkbox's value has changed (when wrapped in Field.Root)."
    },
    "data-touched": {
      "description": "Present when the checkbox has been touched (when wrapped in Field.Root)."
    },
    "data-filled": {
      "description": "Present when the checkbox is checked (when wrapped in Field.Root)."
    },
    "data-focused": {
      "description": "Present when the checkbox is focused (when wrapped in Field.Root)."
    }
  },
  "cssVariables": {}
}
