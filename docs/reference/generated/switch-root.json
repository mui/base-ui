{
  "name": "SwitchRoot",
  "description": "Represents the switch itself.\nRenders a `<button>` element and a hidden `<input>` beside.",
  "props": {
    "name": {
      "type": "string",
      "description": "Identifies the field when a form is submitted.",
      "detailedType": "string | undefined"
    },
    "defaultChecked": {
      "type": "boolean",
      "default": "false",
      "description": "Whether the switch is initially active.\n\nTo render a controlled switch, use the `checked` prop instead.",
      "detailedType": "boolean | undefined"
    },
    "checked": {
      "type": "boolean",
      "description": "Whether the switch is currently active.\n\nTo render an uncontrolled switch, use the `defaultChecked` prop instead.",
      "detailedType": "boolean | undefined"
    },
    "onCheckedChange": {
      "type": "((checked: boolean, eventDetails: Switch.Root.ChangeEventDetails) => void)",
      "description": "Event handler called when the switch is activated or deactivated.",
      "detailedType": "| ((\n    checked: boolean,\n    eventDetails: Switch.Root.ChangeEventDetails,\n  ) => void)\n| undefined"
    },
    "nativeButton": {
      "type": "boolean",
      "default": "true",
      "description": "Whether the component renders a native `<button>` element when replacing it\nvia the `render` prop.\nSet to `false` if the rendered element is not a button (e.g. `<div>`).",
      "detailedType": "boolean | undefined"
    },
    "disabled": {
      "type": "boolean",
      "default": "false",
      "description": "Whether the component should ignore user interaction.",
      "detailedType": "boolean | undefined"
    },
    "readOnly": {
      "type": "boolean",
      "default": "false",
      "description": "Whether the user should be unable to activate or deactivate the switch.",
      "detailedType": "boolean | undefined"
    },
    "required": {
      "type": "boolean",
      "default": "false",
      "description": "Whether the user must activate the switch before submitting a form.",
      "detailedType": "boolean | undefined"
    },
    "inputRef": {
      "type": "Ref<HTMLInputElement>",
      "description": "A ref to access the hidden `<input>` element.",
      "detailedType": "React.Ref<HTMLInputElement> | undefined"
    },
    "id": {
      "type": "string",
      "description": "The id of the switch element.",
      "detailedType": "string | undefined"
    },
    "className": {
      "type": "string | ((state: Switch.Root.State) => string)",
      "description": "CSS class applied to the element, or a function that\nreturns a class based on the component’s state."
    },
    "render": {
      "type": "ReactElement | ((props: HTMLProps, state: Switch.Root.State) => ReactElement)",
      "description": "Allows you to replace the component’s HTML element\nwith a different tag, or compose it with another component.\n\nAccepts a `ReactElement` or a function that returns the element to render.",
      "detailedType": "| ReactElement\n| ((\n    props: HTMLProps,\n    state: Switch.Root.State,\n  ) => ReactElement)"
    }
  },
  "dataAttributes": {
    "data-checked": {
      "description": "Present when the switch is checked."
    },
    "data-unchecked": {
      "description": "Present when the switch is not checked."
    },
    "data-disabled": {
      "description": "Present when the switch is disabled."
    },
    "data-readonly": {
      "description": "Present when the switch is readonly."
    },
    "data-required": {
      "description": "Present when the switch is required."
    },
    "data-valid": {
      "description": "Present when the switch is in valid state (when wrapped in Field.Root)."
    },
    "data-invalid": {
      "description": "Present when the switch is in invalid state (when wrapped in Field.Root)."
    },
    "data-dirty": {
      "description": "Present when the switch's value has changed (when wrapped in Field.Root)."
    },
    "data-touched": {
      "description": "Present when the switch has been touched (when wrapped in Field.Root)."
    },
    "data-filled": {
      "description": "Present when the switch is active (when wrapped in Field.Root)."
    },
    "data-focused": {
      "description": "Present when the switch is focused (when wrapped in Field.Root)."
    }
  },
  "cssVariables": {}
}
