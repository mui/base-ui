{
  "name": "SwitchRoot",
  "description": "Represents the switch itself.\nRenders a `<button>` element and a hidden `<input>` beside.",
  "props": {
    "checked": {
      "type": "boolean",
      "description": "Whether the switch is currently active.\n\nTo render an uncontrolled switch, use the `defaultChecked` prop instead."
    },
    "className": {
      "type": "string | (state) => string",
      "description": "CSS class applied to the element, or a function that\nreturns a class based on the component’s state."
    },
    "defaultChecked": {
      "type": "boolean",
      "default": "false",
      "description": "Whether the switch is initially active.\n\nTo render a controlled switch, use the `checked` prop instead."
    },
    "disabled": {
      "type": "boolean",
      "default": "false",
      "description": "Whether the component should ignore user interaction."
    },
    "inputRef": {
      "type": "React.Ref",
      "description": "A React ref to access the hidden `<input>` element."
    },
    "name": {
      "type": "string",
      "description": "Identifies the field when a form is submitted."
    },
    "onCheckedChange": {
      "type": "(checked, event) => void",
      "description": "Event handler called when the switch is activated or deactivated."
    },
    "readOnly": {
      "type": "boolean",
      "default": "false",
      "description": "Whether the user should be unable to activate or deactivate the switch."
    },
    "render": {
      "type": "React.ReactElement | (props, state) => React.ReactElement",
      "description": "Allows you to replace the component’s HTML element\nwith a different tag, or compose it with another component.\n\nAccepts a `ReactElement` or a function that returns the element to render."
    },
    "required": {
      "type": "boolean",
      "default": "false",
      "description": "Whether the user must activate the switch before submitting a form."
    }
  }
}
