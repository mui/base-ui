{
  "name": "RadioIndicator",
  "description": "Indicates whether the radio button is selected.\nRenders a `<span>` element.",
  "props": {
    "className": {
      "type": "string | (state) => string",
      "description": "CSS class applied to the element, or a function that\nreturns a class based on the component’s state."
    },
    "keepMounted": {
      "type": "boolean",
      "default": "true",
      "description": "Whether to keep the HTML element in the DOM when the radio button is inactive."
    },
    "render": {
      "type": "React.ReactElement | (props, state) => React.ReactElement",
      "description": "Allows you to replace the component’s HTML element\nwith a different tag, or compose it with another component.\n\nAccepts a `ReactElement` or a function that returns the element to render."
    }
  },
  "dataAttributes": {
    "data-checked": {
      "description": "Present when the radio is checked."
    },
    "data-unchecked": {
      "description": "Present when the radio is not checked."
    },
    "data-disabled": {
      "description": "Present when the radio is disabled."
    },
    "data-readonly": {
      "description": "Present when the radio is readonly."
    },
    "data-required": {
      "description": "Present when the radio is required."
    },
    "data-valid": {
      "description": "Present when the radio is in valid state (when wrapped in Field.Root)."
    },
    "data-invalid": {
      "description": "Present when the radio is in invalid state (when wrapped in Field.Root)."
    },
    "data-dirty": {
      "description": "Present when the radio's value has changed (when wrapped in Field.Root)."
    },
    "data-touched": {
      "description": "Present when the radio has been thouched (when wrapped in Field.Root)."
    }
  },
  "cssVariables": {}
}
