{
  "name": "PopoverTrigger",
  "description": "A button that opens the popover.\nRenders a `<button>` element.",
  "props": {
    "handle": {
      "type": "PopoverStore<Payload>",
      "description": "A handle to associate the trigger with a popover.",
      "detailedType": "{} | undefined"
    },
    "nativeButton": {
      "type": "boolean",
      "default": "true",
      "description": "Whether the component renders a native `<button>` element when replacing it\nvia the `render` prop.\nSet to `false` if the rendered element is not a button (e.g. `<div>`).",
      "detailedType": "boolean | undefined"
    },
    "payload": {
      "type": "Payload",
      "description": "A payload to pass to the popover when it is opened.",
      "detailedType": "Payload | undefined"
    },
    "openOnHover": {
      "type": "boolean",
      "default": "false",
      "description": "Whether the popover should also open when the trigger is hovered.",
      "detailedType": "boolean | undefined"
    },
    "delay": {
      "type": "number",
      "default": "300",
      "description": "How long to wait before the popover may be opened on hover. Specified in milliseconds.\n\nRequires the `openOnHover` prop.",
      "detailedType": "number | undefined"
    },
    "closeDelay": {
      "type": "number",
      "default": "0",
      "description": "How long to wait before closing the popover that was opened on hover.\nSpecified in milliseconds.\n\nRequires the `openOnHover` prop.",
      "detailedType": "number | undefined"
    },
    "id": {
      "type": "string",
      "description": "Id of the trigger. In addition to being forwarded to the rendered element,\nit is also used to specify the active trigger for the popover in controlled mode (with the PopoverRoot `triggerId` prop).",
      "detailedType": "string | undefined"
    },
    "className": {
      "type": "string | ((state: Popover.Trigger.State) => string)",
      "description": "CSS class applied to the element, or a function that\nreturns a class based on the component’s state."
    },
    "render": {
      "type": "ReactElement | ((props: HTMLProps, state: Popover.Trigger.State) => ReactElement)",
      "description": "Allows you to replace the component’s HTML element\nwith a different tag, or compose it with another component.\n\nAccepts a `ReactElement` or a function that returns the element to render.",
      "detailedType": "| ReactElement\n| ((\n    props: HTMLProps,\n    state: Popover.Trigger.State,\n  ) => ReactElement)"
    }
  },
  "dataAttributes": {
    "data-popup-open": {
      "description": "Present when the corresponding popover is open."
    },
    "data-pressed": {
      "description": "Present when the trigger is pressed."
    }
  },
  "cssVariables": {}
}
