{
  "name": "CheckboxGroup",
  "description": "Provides a shared state to a series of checkboxes.",
  "props": {
    "defaultValue": {
      "type": "string[]",
      "description": "Names of the checkboxes in the group that should be initially ticked.",
      "detailedType": "string[] | undefined"
    },
    "value": {
      "type": "string[]",
      "description": "Names of the checkboxes in the group that should be ticked.",
      "detailedType": "string[] | undefined"
    },
    "onValueChange": {
      "type": "((value: string[], eventDetails: CheckboxGroupChangeEventDetails) => void)",
      "description": "Event handler called when a checkbox in the group is ticked or unticked.",
      "detailedType": "| ((\n    value: string[],\n    eventDetails: CheckboxGroupChangeEventDetails,\n  ) => void)\n| undefined"
    },
    "allValues": {
      "type": "string[]",
      "description": "Names of all checkboxes in the group. Use this when creating a parent checkbox.",
      "detailedType": "string[] | undefined"
    },
    "disabled": {
      "type": "boolean",
      "description": "Whether the component should ignore user interaction.",
      "detailedType": "boolean | undefined"
    },
    "className": {
      "type": "string | ((state: CheckboxGroupState) => string)",
      "description": "CSS class applied to the element, or a function that\nreturns a class based on the component’s state."
    },
    "render": {
      "type": "ReactElement | ((props: HTMLProps, state: CheckboxGroupState) => ReactElement)",
      "description": "Allows you to replace the component’s HTML element\nwith a different tag, or compose it with another component.\n\nAccepts a `ReactElement` or a function that returns the element to render.",
      "detailedType": "| ReactElement\n| ((\n    props: HTMLProps,\n    state: CheckboxGroupState,\n  ) => ReactElement)"
    }
  },
  "dataAttributes": {
    "data-disabled": {
      "description": "Present when the checkbox group is disabled."
    }
  },
  "cssVariables": {}
}
