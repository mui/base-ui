{
  "name": "FieldError",
  "description": "An error message displayed if the field control fails validation.\nRenders a `<div>` element.",
  "props": {
    "className": {
      "type": "string | (state) => string",
      "description": "CSS class applied to the element, or a function that\nreturns a class based on the component’s state."
    },
    "forceShow": {
      "type": "boolean",
      "description": "Determines whether the error message should be shown regardless of the field's client validity."
    },
    "match": {
      "type": "'badInput' | 'customError' | 'patternMismatch' | 'rangeOverflow' | 'rangeUnderflow' | 'stepMismatch' | 'tooLong' | 'tooShort' | 'typeMismatch' | 'valid' | 'valueMissing'",
      "description": "Determines whether the error message should be shown when it matches a given property of the\nfield's `ValidityState`."
    },
    "render": {
      "type": "React.ReactElement | (props, state) => React.ReactElement",
      "description": "Allows you to replace the component’s HTML element\nwith a different tag, or compose it with another component.\n\nAccepts a `ReactElement` or a function that returns the element to render."
    }
  },
  "dataAttributes": {
    "data-dirty": {
      "description": "Present when the field's value has changed."
    },
    "data-invalid": {
      "description": "Present when the field is in invalid state."
    },
    "data-touched": {
      "description": "Present when the field has been thouched."
    },
    "data-valid": {
      "description": "Present when the field is in valid state."
    }
  }
}
