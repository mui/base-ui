{
  "name": "DialogRoot",
  "description": "Groups all parts of the dialog.\nDoesnâ€™t render its own HTML element.",
  "props": {
    "defaultOpen": {
      "type": "boolean",
      "default": "false",
      "description": "Whether the dialog is initially open.\n\nTo render a controlled dialog, use the `open` prop instead."
    },
    "open": {
      "type": "boolean",
      "description": "Whether the dialog is currently open."
    },
    "onOpenChange": {
      "type": "(open: boolean, event?: Event, reason?: Dialog.Root.OpenChangeReason) => void",
      "description": "Event handler called when the dialog is opened or closed."
    },
    "actionsRef": {
      "type": "RefObject<{ unmount: () => void; }>",
      "description": "A ref to imperative actions.\n- `unmount`: When specified, the dialog will not be unmounted when closed.\nInstead, the `unmount` function must be called to unmount the dialog manually.\nUseful when the dialog's animation is controlled by an external library."
    },
    "dismissible": {
      "type": "boolean",
      "default": "true",
      "description": "Determines whether the dialog should close on outside clicks."
    },
    "modal": {
      "type": "boolean | 'trap-focus'",
      "default": "true",
      "description": "Determines if the dialog enters a modal state when open.\n- `true`: user interaction is limited to just the dialog: focus is trapped, document page scroll is locked, and pointer interactions on outside elements are disabled.\n- `false`: user interaction with the rest of the document is allowed.\n- `'trap-focus'`: focus is trapped inside the dialog, but document page scroll is not locked and pointer interactions outside of it remain enabled."
    },
    "onOpenChangeComplete": {
      "type": "((open: boolean) => void)",
      "description": "Event handler called after any animations complete when the dialog is opened or closed."
    },
    "children": {
      "type": "ReactNode"
    }
  },
  "dataAttributes": {},
  "cssVariables": {}
}
