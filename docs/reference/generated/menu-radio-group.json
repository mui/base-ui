{
  "name": "MenuRadioGroup",
  "description": "Groups related radio items.\nRenders a `<div>` element.",
  "props": {
    "defaultValue": {
      "type": "any",
      "expanded": "any",
      "description": "The uncontrolled value of the radio item that should be initially selected.\n\nTo render a controlled radio group, use the `value` prop instead."
    },
    "value": {
      "type": "any",
      "expanded": "any",
      "description": "The controlled value of the radio item that should be currently selected.\n\nTo render an uncontrolled radio group, use the `defaultValue` prop instead."
    },
    "onValueChange": {
      "type": "((value: any, event: Event) => void)",
      "expanded": "((value: any, event: Event) => void) | undefined",
      "default": "() => {}",
      "description": "Function called when the selected value changes."
    },
    "disabled": {
      "type": "boolean",
      "expanded": "boolean | undefined",
      "default": "false",
      "description": "Whether the component should ignore user interaction."
    },
    "children": {
      "type": "ReactNode",
      "expanded": "React.ReactNode",
      "description": "The content of the component."
    },
    "className": {
      "type": "string | ((state: Menu.RadioGroup.State) => string)",
      "description": "CSS class applied to the element, or a function that\nreturns a class based on the component’s state."
    },
    "render": {
      "type": "ReactElement | ((props: HTMLProps, state: Menu.RadioGroup.State) => ReactElement)",
      "description": "Allows you to replace the component’s HTML element\nwith a different tag, or compose it with another component.\n\nAccepts a `ReactElement` or a function that returns the element to render."
    }
  },
  "dataAttributes": {},
  "cssVariables": {}
}
