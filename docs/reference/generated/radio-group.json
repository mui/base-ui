{
  "name": "RadioGroup",
  "description": "Provides a shared state to a series of radio buttons.\nRenders a `<div>` element.",
  "props": {
    "className": {
      "type": "string | (state) => string",
      "description": "CSS class applied to the element, or a function that\nreturns a class based on the component’s state."
    },
    "defaultValue": {
      "type": "any",
      "description": "The uncontrolled value of the radio button that should be initially selected.\n\nTo render a controlled radio group, use the `value` prop instead."
    },
    "disabled": {
      "type": "boolean",
      "default": "false",
      "description": "Whether the component should ignore user interaction."
    },
    "name": {
      "type": "string",
      "description": "Identifies the field when a form is submitted."
    },
    "onValueChange": {
      "type": "(value, event) => void",
      "description": "Callback fired when the value changes."
    },
    "readOnly": {
      "type": "boolean",
      "default": "false",
      "description": "Whether the user should be unable to select a different radio button in the group."
    },
    "render": {
      "type": "React.ReactElement | (props, state) => React.ReactElement",
      "description": "Allows you to replace the component’s HTML element\nwith a different tag, or compose it with another component.\n\nAccepts a `ReactElement` or a function that returns the element to render."
    },
    "required": {
      "type": "boolean",
      "default": "false",
      "description": "Whether the user must choose a value before submitting a form."
    },
    "value": {
      "type": "any",
      "description": "The controlled value of the radio item that should be currently selected.\n\nTo render an uncontrolled radio group, use the `defaultValue` prop instead."
    }
  }
}
