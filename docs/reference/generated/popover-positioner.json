{
  "name": "PopoverPositioner",
  "description": "Positions the popover against the trigger.\nRenders a `<div>` element.",
  "props": {
    "collisionAvoidance": {
      "type": "CollisionAvoidance",
      "expanded": "{ side: 'none' | 'flip', align: 'shift' | 'none' | 'flip', fallbackAxisSide: 'none' | 'start' | 'end' } | { side: 'shift' | 'none', align: 'shift' | 'none', fallbackAxisSide: 'none' | 'start' | 'end' } | undefined",
      "description": "Determines how to handle collisions when positioning the popup.",
      "example": "```jsx\n<Positioner\n  collisionAvoidance={{\n    side: 'shift',\n    align: 'shift',\n    fallbackAxisSide: 'none',\n  }}\n/>\n```"
    },
    "align": {
      "type": "'center' | 'start' | 'end'",
      "expanded": "'center' | 'start' | 'end' | undefined",
      "default": "'center'",
      "description": "How to align the popup relative to the specified side."
    },
    "alignOffset": {
      "type": "number | OffsetFunction",
      "expanded": "number | OffsetFunction | undefined",
      "default": "0",
      "description": "Additional offset along the alignment axis in pixels.\nAlso accepts a function that returns the offset to read the dimensions of the anchor\nand positioner elements, along with its side and alignment.\n\n- `data.anchor`: the dimensions of the anchor element with properties `width` and `height`.\n- `data.positioner`: the dimensions of the positioner element with properties `width` and `height`.\n- `data.side`: which side of the anchor element the positioner is aligned against.\n- `data.align`: how the positioner is aligned relative to the specified side."
    },
    "side": {
      "type": "Side",
      "expanded": "'top' | 'right' | 'bottom' | 'left' | 'inline-end' | 'inline-start' | undefined",
      "default": "'bottom'",
      "description": "Which side of the anchor element to align the popup against.\nMay automatically change to avoid collisions."
    },
    "sideOffset": {
      "type": "number | OffsetFunction",
      "expanded": "number | OffsetFunction | undefined",
      "default": "0",
      "description": "Distance between the anchor and the popup in pixels.\nAlso accepts a function that returns the distance to read the dimensions of the anchor\nand positioner elements, along with its side and alignment.\n\n- `data.anchor`: the dimensions of the anchor element with properties `width` and `height`.\n- `data.positioner`: the dimensions of the positioner element with properties `width` and `height`.\n- `data.side`: which side of the anchor element the positioner is aligned against.\n- `data.align`: how the positioner is aligned relative to the specified side.",
      "example": "```jsx\n<Positioner\n  sideOffset={({ side, align, anchor, positioner }) => {\n    return side === 'top' || side === 'bottom'\n      ? anchor.height\n      : anchor.width;\n  }}\n/>\n```"
    },
    "arrowPadding": {
      "type": "number",
      "expanded": "number | undefined",
      "default": "5",
      "description": "Minimum distance to maintain between the arrow and the edges of the popup.\n\nUse it to prevent the arrow element from hanging out of the rounded corners of a popup."
    },
    "anchor": {
      "type": "Element | RefObject<Element | null> | VirtualElement | (() => Element | VirtualElement | null) | null",
      "expanded": "Element | React.RefObject<Element | null> | VirtualElement | (() => Element | VirtualElement | null) | null | undefined",
      "description": "An element to position the popup against.\nBy default, the popup will be positioned against the trigger."
    },
    "collisionBoundary": {
      "type": "Boundary",
      "expanded": "Element | any | Element[] | 'clipping-ancestors' | undefined",
      "default": "'clipping-ancestors'",
      "description": "An element or a rectangle that delimits the area that the popup is confined to."
    },
    "collisionPadding": {
      "type": "Padding",
      "expanded": "{ top?: number; right?: number; bottom?: number; left?: number } | number | undefined",
      "default": "5",
      "description": "Additional space to maintain from the edge of the collision boundary."
    },
    "sticky": {
      "type": "boolean",
      "expanded": "boolean | undefined",
      "default": "false",
      "description": "Whether to maintain the popup in the viewport after\nthe anchor element was scrolled out of view."
    },
    "positionMethod": {
      "type": "'fixed' | 'absolute'",
      "expanded": "'fixed' | 'absolute' | undefined",
      "default": "'absolute'",
      "description": "Determines which CSS `position` property to use."
    },
    "trackAnchor": {
      "type": "boolean",
      "expanded": "boolean | undefined",
      "default": "true",
      "description": "Whether the popup tracks any layout shift of its positioning anchor."
    },
    "className": {
      "type": "string | ((state: Popover.Positioner.State) => string)",
      "description": "CSS class applied to the element, or a function that\nreturns a class based on the component’s state."
    },
    "render": {
      "type": "ReactElement | ((props: HTMLProps, state: Popover.Positioner.State) => ReactElement)",
      "description": "Allows you to replace the component’s HTML element\nwith a different tag, or compose it with another component.\n\nAccepts a `ReactElement` or a function that returns the element to render."
    }
  },
  "dataAttributes": {
    "data-open": {
      "description": "Present when the popup is open."
    },
    "data-closed": {
      "description": "Present when the popup is closed."
    },
    "data-anchor-hidden": {
      "description": "Present when the anchor is hidden."
    },
    "data-align": {
      "description": "Indicates how the popup is aligned relative to specified side.",
      "type": "'start' | 'center' | 'end'"
    },
    "data-side": {
      "description": "Indicates which side the popup is positioned relative to the trigger.",
      "type": "'top' | 'bottom' | 'left' | 'right' | 'inline-end' | 'inline-start'"
    }
  },
  "cssVariables": {
    "--anchor-height": {
      "description": "The anchor's height.",
      "type": "number"
    },
    "--anchor-width": {
      "description": "The anchor's width.",
      "type": "number"
    },
    "--available-height": {
      "description": "The available height between the trigger and the edge of the viewport.",
      "type": "number"
    },
    "--available-width": {
      "description": "The available width between the trigger and the edge of the viewport.",
      "type": "number"
    },
    "--transform-origin": {
      "description": "The coordinates that this element is anchored to. Used for animations and transitions.",
      "type": "string"
    }
  }
}
