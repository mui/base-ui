{
  "name": "NumberFieldRoot",
  "description": "Groups all parts of the number field and manages its state.\nRenders a `<div>` element.",
  "props": {
    "allowWheelScrub": {
      "type": "boolean",
      "default": "false",
      "description": "Whether to allow the user to scrub the input value with the mouse wheel while focused and\nhovering over the input."
    },
    "autoFocus": {
      "type": "boolean",
      "default": "false",
      "description": "Whether to focus the element on page load."
    },
    "className": {
      "type": "string | (state) => string",
      "description": "CSS class applied to the element, or a function that\nreturns a class based on the component’s state."
    },
    "defaultValue": {
      "type": "number",
      "description": "The uncontrolled value of the field when it’s initially rendered.\n\nTo render a controlled number field, use the `value` prop instead."
    },
    "disabled": {
      "type": "boolean",
      "default": "false",
      "description": "Whether the component should ignore user interaction."
    },
    "format": {
      "type": "Intl.NumberFormatOptions",
      "description": "Options to format the input value."
    },
    "id": {
      "type": "string",
      "description": "The id of the input element."
    },
    "invalid": {
      "type": "boolean",
      "default": "false",
      "description": "Whether the field is forcefully marked as invalid."
    },
    "largeStep": {
      "type": "number",
      "default": "10",
      "description": "The large step value of the input element when incrementing while the shift key is held. Snaps\nto multiples of this value."
    },
    "max": {
      "type": "number",
      "description": "The maximum value of the input element."
    },
    "min": {
      "type": "number",
      "description": "The minimum value of the input element."
    },
    "name": {
      "type": "string",
      "description": "Identifies the field when a form is submitted."
    },
    "onValueChange": {
      "type": "(value, event) => void",
      "description": "Callback fired when the number value changes."
    },
    "readOnly": {
      "type": "boolean",
      "default": "false",
      "description": "Whether the user should be unable to change the field value."
    },
    "render": {
      "type": "React.ReactElement | (props, state) => React.ReactElement",
      "description": "Allows you to replace the component’s HTML element\nwith a different tag, or compose it with another component.\n\nAccepts a `ReactElement` or a function that returns the element to render."
    },
    "required": {
      "type": "boolean",
      "default": "false",
      "description": "Whether the user must enter a value before submitting a form."
    },
    "smallStep": {
      "type": "number",
      "default": "0.1",
      "description": "The small step value of the input element when incrementing while the meta key is held. Snaps\nto multiples of this value."
    },
    "step": {
      "type": "number",
      "description": "The step value of the input element when incrementing, decrementing, or scrubbing. It will snap\nto multiples of this value. When unspecified, decimal values are allowed, but the stepper\nbuttons will increment or decrement by `1`."
    },
    "value": {
      "type": "number",
      "description": "The raw numeric value of the field."
    }
  }
}
