{
  "name": "NumberFieldRoot",
  "description": "Groups all parts of the number field and manages its state.\nRenders a `<div>` element.",
  "props": {
    "name": {
      "type": "string",
      "detailedType": "string | undefined",
      "description": "Identifies the field when a form is submitted."
    },
    "defaultValue": {
      "type": "number",
      "detailedType": "number | undefined",
      "description": "The uncontrolled value of the field when it’s initially rendered.\n\nTo render a controlled number field, use the `value` prop instead."
    },
    "value": {
      "type": "number | null",
      "detailedType": "number | null | undefined",
      "description": "The raw numeric value of the field."
    },
    "onValueChange": {
      "type": "((value: number | null, event: Event | undefined) => void)",
      "detailedType": "| ((\n    value: number | null,\n    event: Event | undefined,\n  ) => void)\n| undefined",
      "description": "Callback fired when the number value changes."
    },
    "locale": {
      "type": "Intl.LocalesArgument",
      "detailedType": "Intl.LocalesArgument",
      "description": "The locale of the input element.\nDefaults to the user's runtime locale."
    },
    "snapOnStep": {
      "type": "boolean",
      "detailedType": "boolean | undefined",
      "default": "false",
      "description": "Whether the value should snap to the nearest step when incrementing or decrementing."
    },
    "step": {
      "type": "number",
      "detailedType": "number | undefined",
      "default": "1",
      "description": "Amount to increment and decrement with the buttons and arrow keys,\nor to scrub with pointer movement in the scrub area."
    },
    "smallStep": {
      "type": "number",
      "detailedType": "number | undefined",
      "default": "0.1",
      "description": "The small step value of the input element when incrementing while the meta key is held. Snaps\nto multiples of this value."
    },
    "largeStep": {
      "type": "number",
      "detailedType": "number | undefined",
      "default": "10",
      "description": "The large step value of the input element when incrementing while the shift key is held. Snaps\nto multiples of this value."
    },
    "min": {
      "type": "number",
      "detailedType": "number | undefined",
      "description": "The minimum value of the input element."
    },
    "max": {
      "type": "number",
      "detailedType": "number | undefined",
      "description": "The maximum value of the input element."
    },
    "allowWheelScrub": {
      "type": "boolean",
      "detailedType": "boolean | undefined",
      "default": "false",
      "description": "Whether to allow the user to scrub the input value with the mouse wheel while focused and\nhovering over the input."
    },
    "format": {
      "type": "Intl.NumberFormatOptions",
      "detailedType": "Intl.NumberFormatOptions | undefined",
      "description": "Options to format the input value."
    },
    "disabled": {
      "type": "boolean",
      "detailedType": "boolean | undefined",
      "default": "false",
      "description": "Whether the component should ignore user interaction."
    },
    "readOnly": {
      "type": "boolean",
      "detailedType": "boolean | undefined",
      "default": "false",
      "description": "Whether the user should be unable to change the field value."
    },
    "required": {
      "type": "boolean",
      "detailedType": "boolean | undefined",
      "default": "false",
      "description": "Whether the user must enter a value before submitting a form."
    },
    "inputRef": {
      "type": "Ref<HTMLInputElement>",
      "detailedType": "React.Ref<HTMLInputElement> | undefined",
      "description": "A ref to access the hidden input element."
    },
    "id": {
      "type": "string",
      "detailedType": "string | undefined",
      "description": "The id of the input element."
    },
    "className": {
      "type": "string | ((state: NumberField.Root.State) => string)",
      "detailedType": "| string\n| ((state: NumberField.Root.State) => string)",
      "description": "CSS class applied to the element, or a function that\nreturns a class based on the component’s state."
    },
    "render": {
      "type": "ReactElement | ((props: HTMLProps, state: NumberField.Root.State) => ReactElement)",
      "detailedType": "| ReactElement\n| ((\n    props: HTMLProps,\n    state: NumberField.Root.State,\n  ) => ReactElement)",
      "description": "Allows you to replace the component’s HTML element\nwith a different tag, or compose it with another component.\n\nAccepts a `ReactElement` or a function that returns the element to render."
    }
  },
  "dataAttributes": {
    "data-disabled": {
      "description": "Present when the number field is disabled."
    },
    "data-readonly": {
      "description": "Present when the number field is readonly."
    },
    "data-required": {
      "description": "Present when the number field is required."
    },
    "data-valid": {
      "description": "Present when the number field is in valid state (when wrapped in Field.Root)."
    },
    "data-invalid": {
      "description": "Present when the number field is in invalid state (when wrapped in Field.Root)."
    },
    "data-dirty": {
      "description": "Present when the number field's value has changed (when wrapped in Field.Root)."
    },
    "data-touched": {
      "description": "Present when the number field has been touched (when wrapped in Field.Root)."
    },
    "data-filled": {
      "description": "Present when the number field is filled (when wrapped in Field.Root)."
    },
    "data-focused": {
      "description": "Present when the number field is focused (when wrapped in Field.Root)."
    },
    "data-scrubbing": {
      "description": "Present while scrubbing."
    }
  },
  "cssVariables": {}
}
