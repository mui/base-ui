{
  "name": "ProgressRoot",
  "description": "Groups all parts of the progress bar and provides the task completion status to screen readers.\nRenders a `<div>` element.",
  "props": {
    "aria-label": {
      "type": "string",
      "description": "The label for the Indicator component."
    },
    "aria-labelledby": {
      "type": "string",
      "description": "An id or space-separated list of ids of elements that label the Indicator component."
    },
    "value": {
      "type": "number",
      "default": "null",
      "description": "The current value. The component is indeterminate when value is `null`."
    },
    "aria-valuetext": {
      "type": "string",
      "description": "A string value that provides a human-readable text alternative for the current value of the progress indicator."
    },
    "getAriaLabel": {
      "type": "(value) => string",
      "description": "Accepts a function which returns a string value that provides an accessible name for the Indicator component"
    },
    "getAriaValueText": {
      "type": "(value) => string",
      "description": "Accepts a function which returns a string value that provides a human-readable text alternative for the current value of the progress indicator."
    },
    "min": {
      "type": "number",
      "default": "0",
      "description": "The minimum value"
    },
    "max": {
      "type": "number",
      "default": "100",
      "description": "The maximum value"
    },
    "className": {
      "type": "string | (state) => string",
      "description": "CSS class applied to the element, or a function that\nreturns a class based on the component’s state."
    },
    "render": {
      "type": "React.ReactElement | (props, state) => React.ReactElement",
      "description": "Allows you to replace the component’s HTML element\nwith a different tag, or compose it with another component.\n\nAccepts a `ReactElement` or a function that returns the element to render."
    }
  },
  "dataAttributes": {
    "data-complete": {
      "description": "Present when the progress has completed."
    },
    "data-indeterminate": {
      "description": "Present when the progress is in interminate state."
    },
    "data-progressing": {
      "description": "Present while the progress is progressing."
    }
  },
  "cssVariables": {}
}
