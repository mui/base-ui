{
  "name": "ProgressRoot",
  "description": "",
  "props": {
    "aria-label": {
      "type": "string",
      "description": "The label for the Indicator component."
    },
    "aria-labelledby": {
      "type": "string",
      "description": "An id or space-separated list of ids of elements that label the Indicator component."
    },
    "aria-valuetext": {
      "type": "string",
      "description": "A string value that provides a human-readable text alternative for the current value of the progress indicator."
    },
    "className": {
      "type": "string | (state) => string",
      "description": "Class names applied to the element or a function that returns them based on the component's state."
    },
    "format": {
      "type": "{ compactDisplay?: 'long' | 'short', currency?: string, currencyDisplay?: 'code' | 'name' | 'narrowSymbol' | 'symbol', currencySign?: 'accounting' | 'standard', localeMatcher?: 'best fit' | 'lookup', maximumFractionDigits?: number, maximumSignificantDigits?: number, minimumFractionDigits?: number, minimumIntegerDigits?: number, minimumSignificantDigits?: number, notation?: 'compact' | 'engineering' | 'scientific' | 'standard', numberingSystem?: string, signDisplay?: 'always' | 'auto' | 'exceptZero' | 'never', style?: 'currency' | 'decimal' | 'percent' | 'unit', unit?: string, unitDisplay?: 'long' | 'narrow' | 'short', useGrouping?: bool }",
      "description": "Options to format the value."
    },
    "getAriaLabel": {
      "type": "(value) => string",
      "description": "Accepts a function which returns a string value that provides an accessible name for the Indicator component"
    },
    "getAriaValueText": {
      "type": "(value) => string",
      "description": "Accepts a function which returns a string value that provides a human-readable text alternative for the current value of the progress indicator."
    },
    "max": {
      "type": "number",
      "default": "100",
      "description": "The maximum value"
    },
    "min": {
      "type": "number",
      "default": "0",
      "description": "The minimum value"
    },
    "render": {
      "type": "React.ReactElement | (props, state) => React.ReactElement",
      "description": "A function to customize rendering of the component."
    },
    "value": {
      "type": "number",
      "default": "null",
      "description": "The current value. The component is indeterminate when value is `null`."
    }
  }
}
