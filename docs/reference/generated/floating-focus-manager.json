{
  "name": "FloatingFocusManager",
  "description": "Provides focus management for the floating element.",
  "props": {
    "closeOnFocusOut": {
      "type": "boolean",
      "default": "true",
      "description": "Determines whether `focusout` event listeners that control whether the\nfloating element should be closed if the focus moves outside of it are\nattached to the reference and floating elements. This affects non-modal\nfocus management."
    },
    "context": {
      "type": "FloatingRootContext",
      "required": true,
      "description": "The floating context returned from `useFloatingRootContext`."
    },
    "getInsideElements": {
      "type": "(() => Element[])",
      "description": "Returns a list of elements that should be considered part of the\nfloating element."
    },
    "guards": {
      "type": "boolean",
      "default": "true",
      "description": "Determines if the focus guards are rendered. If not, focus can escape into\nthe address bar/console/browser UI, like in native dialogs."
    },
    "modal": {
      "type": "boolean",
      "default": "true",
      "description": "Determines if focus is “modal”, meaning focus is fully trapped inside the\nfloating element and outside content cannot be accessed. This includes\nscreen reader virtual cursors."
    },
    "order": {
      "type": "('content' | 'reference' | 'floating')[]",
      "default": "['content']",
      "description": "The order in which focus cycles."
    },
    "outsideElementsInert": {
      "type": "boolean",
      "default": "false",
      "description": "Determines whether outside elements are `inert` when `modal` is enabled.\nThis enables pointer modality without a backdrop."
    },
    "restoreFocus": {
      "type": "boolean",
      "default": "false",
      "description": "Determines if focus should be restored to the nearest tabbable element if\nfocus inside the floating element is lost (such as due to the removal of\nthe currently focused element from the DOM)."
    },
    "returnFocus": {
      "type": "boolean | MutableRefObject<HTMLElement | null>",
      "default": "true",
      "description": "Determines if focus should be returned to the reference element once the\nfloating element closes/unmounts (or if that is not available, the\npreviously focused element). This prop is ignored if the floating element\nlost focus.\nIt can be also set to a ref to explicitly control the element to return focus to."
    },
    "visuallyHiddenDismiss": {
      "type": "string | boolean",
      "default": "undefined",
      "description": "If your focus management is modal and there is no explicit close button\navailable, you can use this prop to render a visually-hidden dismiss\nbutton at the start and end of the floating element. This allows\ntouch-based screen readers to escape the floating element due to lack of\nan `esc` key."
    },
    "initialFocus": {
      "type": "number | MutableRefObject<HTMLElement | null>",
      "default": "0",
      "description": "Which element to initially focus. Can be either a number (tabbable index as\nspecified by the `order`) or a ref."
    },
    "disabled": {
      "type": "boolean",
      "default": "false",
      "description": "Whether or not the focus manager should be disabled. Useful to delay focus\nmanagement until after a transition completes or some other conditional\nstate."
    },
    "children": {
      "type": "Element",
      "required": true
    }
  },
  "dataAttributes": {},
  "cssVariables": {}
}
