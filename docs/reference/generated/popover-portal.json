{
  "name": "PopoverPortal",
  "description": "A portal element that moves the popup to a different part of the DOM.\nBy default, the portal element is appended to `<body>`.\nRenders a `<div>` element.",
  "props": {
    "style": {
      "type": "CSSProperties | ((state: Popover.Portal.State) => CSSProperties | undefined)",
      "detailedType": "| React.CSSProperties\n| ((\n    state: Popover.Portal.State,\n  ) => CSSProperties | undefined)\n| undefined"
    },
    "container": {
      "type": "HTMLElement | ShadowRoot | RefObject<HTMLElement | ShadowRoot | null> | null",
      "description": "A parent element to render the portal element into.",
      "detailedType": "| HTMLElement\n| ShadowRoot\n| React.RefObject<HTMLElement | ShadowRoot | null>\n| null\n| undefined"
    },
    "className": {
      "type": "string | ((state: Popover.Portal.State) => string | undefined)",
      "description": "CSS class applied to the element, or a function that\nreturns a class based on the component’s state.",
      "detailedType": "| string\n| ((state: Popover.Portal.State) => string | undefined)"
    },
    "keepMounted": {
      "type": "boolean",
      "default": "false",
      "description": "Whether to keep the portal mounted in the DOM while the popup is hidden.",
      "detailedType": "boolean | undefined"
    },
    "render": {
      "type": "ReactElement | ((props: HTMLProps, state: Popover.Portal.State) => ReactElement)",
      "description": "Allows you to replace the component’s HTML element\nwith a different tag, or compose it with another component.\n\nAccepts a `ReactElement` or a function that returns the element to render.",
      "detailedType": "| ReactElement\n| ((\n    props: HTMLProps,\n    state: Popover.Portal.State,\n  ) => ReactElement)"
    }
  },
  "dataAttributes": {},
  "cssVariables": {}
}
