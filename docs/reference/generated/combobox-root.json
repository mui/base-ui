{
  "name": "ComboboxRoot",
  "description": "Groups all parts of the combobox.\nDoesn't render its own HTML element.",
  "props": {
    "name": {
      "type": "string",
      "description": "Identifies the field when a form is submitted."
    },
    "defaultOpen": {
      "type": "boolean",
      "default": "false",
      "description": "Whether the combobox popup is initially open.\n\nTo render a controlled combobox popup, use the `open` prop instead."
    },
    "open": {
      "type": "boolean",
      "description": "Whether the combobox popup is currently open."
    },
    "onOpenChange": {
      "type": "((open: boolean, event: Event | undefined, reason: BaseOpenChangeReason | undefined) => void)",
      "description": "Event handler called when the combobox popup is opened or closed."
    },
    "actionsRef": {
      "type": "RefObject<Combobox.Root.Actions>",
      "description": "A ref to imperative actions.\n- `unmount`: When specified, the combobox will not be unmounted when closed.\nInstead, the `unmount` function must be called to unmount the combobox manually.\nUseful when the combobox's animation is controlled by an external library."
    },
    "cols": {
      "type": "number",
      "default": "1",
      "description": "The number of columns the items are rendered in grid layout."
    },
    "defaultInputValue": {
      "type": "string | number | string[]",
      "description": "The uncontrolled input value when initially rendered."
    },
    "defaultSelectedValue": {
      "type": "any",
      "description": "The uncontrolled selected value of the combobox when it's initially rendered.\n\nTo render a controlled combobox, use the `selectedValue` prop instead."
    },
    "filter": {
      "type": "((item: Item, query: string, itemToString: ((item: Item) => string) | undefined) => boolean)",
      "description": "Filter function used to match items vs input query.\nThe `itemToString` function is provided to help convert items to strings for comparison."
    },
    "inputValue": {
      "type": "string | number | string[]",
      "description": "The input value of the combobox."
    },
    "itemToString": {
      "type": "((item: Item) => string)",
      "description": "Function to convert an item to a string for display in the combobox."
    },
    "itemToValue": {
      "type": "((item: Item) => string)",
      "description": "Function to convert an item to its value for form submission."
    },
    "items": {
      "type": "Item[] | ComboboxGroup<Item>[]",
      "description": "The items to be displayed in the combobox.\nCan be either a flat array of items or an array of groups with items."
    },
    "onInputValueChange": {
      "type": "((value: string, event: Event | undefined, reason: string | undefined) => void)",
      "description": "Callback fired when the input value of the combobox changes."
    },
    "onItemHighlighted": {
      "type": "((value: Item | undefined, data: { type: 'keyboard' | 'pointer', index: number }) => void)",
      "description": "Callback fired when the user navigates the list and highlights an item.\nPasses the item's `value` or `undefined` when no item is highlighted."
    },
    "onOpenChangeComplete": {
      "type": "((open: boolean) => void)",
      "description": "Event handler called after any animations complete when the combobox popup is opened or closed."
    },
    "onSelectedValueChange": {
      "type": "((value: any, event: Event | undefined, reason: string | undefined) => void)",
      "description": "Callback fired when the selected value of the combobox changes."
    },
    "openOnMatch": {
      "type": "boolean",
      "default": "false",
      "description": "Whether the combobox popup is only open when the input value is not empty and matches at least one item."
    },
    "selectedValue": {
      "type": "any",
      "description": "The selected value of the combobox."
    },
    "selectionMode": {
      "type": "'none' | 'single' | 'multiple' | undefined",
      "default": "'none'",
      "description": "How the combobox should remember the selected value.\n- `single`: Remembers the last selected value.\n- `multiple`: Remember all selected values.\n- `none`: Do not remember the selected value."
    },
    "virtualized": {
      "type": "boolean",
      "default": "false",
      "description": "Whether the combobox popup should be virtualized."
    },
    "disabled": {
      "type": "boolean",
      "default": "false",
      "description": "Whether the component should ignore user interaction."
    },
    "readOnly": {
      "type": "boolean",
      "default": "false",
      "description": "Whether the user should be unable to choose a different option from the combobox popup."
    },
    "required": {
      "type": "boolean",
      "default": "false",
      "description": "Whether the user must choose a value before submitting a form."
    },
    "inputRef": {
      "type": "RefObject<HTMLInputElement>",
      "description": "A ref to the hidden input element used for form submission."
    },
    "id": {
      "type": "string",
      "description": "The id of the combobox."
    },
    "children": {
      "type": "ReactNode"
    }
  },
  "dataAttributes": {},
  "cssVariables": {}
}
