{
  "name": "ComboboxRoot",
  "description": "Groups all parts of the combobox.\nDoesn't render its own HTML element.",
  "props": {
    "name": {
      "type": "string",
      "description": "Identifies the field when a form is submitted.",
      "detailedType": "string | undefined"
    },
    "defaultValue": {
      "type": "Value[] | Value | null",
      "description": "The uncontrolled selected value of the combobox when it's initially rendered.\n\nTo render a controlled combobox, use the `value` prop instead.",
      "detailedType": "Value[] | Value | null | undefined"
    },
    "value": {
      "type": "Value[] | Value",
      "description": "The selected value of the combobox. Use when controlled.",
      "detailedType": "Value[] | Value | undefined"
    },
    "onValueChange": {
      "type": "((value: Value[] | Value, event: Event | undefined, reason: string | undefined) => void)",
      "description": "Callback fired when the selected value of the combobox changes.",
      "detailedType": "| ((\n    value: Value[] | Value,\n    event: Event | undefined,\n    reason: string | undefined,\n  ) => void)\n| undefined"
    },
    "defaultOpen": {
      "type": "boolean",
      "default": "false",
      "description": "Whether the popup is initially open.\n\nTo render a controlled popup, use the `open` prop instead.",
      "detailedType": "boolean | undefined"
    },
    "open": {
      "type": "boolean",
      "description": "Whether the popup is currently open.",
      "detailedType": "boolean | undefined"
    },
    "onOpenChange": {
      "type": "((open: boolean, event: Event | undefined, reason: Combobox.RootInternal.ChangeReason | undefined) => void)",
      "description": "Event handler called when the popup is opened or closed.",
      "detailedType": "| ((\n    open: boolean,\n    event: Event | undefined,\n    reason:\n      | Combobox.RootInternal.ChangeReason\n      | undefined,\n  ) => void)\n| undefined"
    },
    "actionsRef": {
      "type": "RefObject<Combobox.Root.Actions>",
      "description": "A ref to imperative actions.\n- `unmount`: When specified, the combobox will not be unmounted when closed.\nInstead, the `unmount` function must be called to unmount the combobox manually.\nUseful when the combobox's animation is controlled by an external library.",
      "detailedType": "React.RefObject<Combobox.Root.Actions> | undefined"
    },
    "cols": {
      "type": "number",
      "default": "1",
      "description": "The number of columns the items are rendered in grid layout.",
      "detailedType": "number | undefined"
    },
    "defaultInputValue": {
      "type": "string | number | string[]",
      "description": "The uncontrolled input value when initially rendered.",
      "detailedType": "string | number | string[] | undefined"
    },
    "filter": {
      "type": "((value: any, query: string, itemToLabel: ((value: any) => string) | undefined) => boolean) | null",
      "description": "Filter function used to match items vs input query.\nThe `itemToLabel` function is provided to help convert items to strings for comparison.",
      "detailedType": "| ((\n    value: any,\n    query: string,\n    itemToLabel: ((value: any) => string) | undefined,\n  ) => boolean)\n| null\n| undefined"
    },
    "inputValue": {
      "type": "string | number | string[]",
      "description": "The input value of the combobox.",
      "detailedType": "string | number | string[] | undefined"
    },
    "itemToLabel": {
      "type": "((item: any) => string)",
      "description": "Function to convert an item's value to a string label for display.",
      "detailedType": "((item: any) => string) | undefined"
    },
    "itemToValue": {
      "type": "((item: any) => string)",
      "description": "Function to convert an item's value to its serialized value for form submission.",
      "detailedType": "((item: any) => string) | undefined"
    },
    "items": {
      "type": "any[] | ComboboxGroup[]",
      "description": "The items to be displayed in the list.\nCan be either a flat array of items or an array of groups with items.",
      "detailedType": "any[] | ComboboxGroup[] | undefined"
    },
    "limit": {
      "type": "number",
      "default": "-1",
      "description": "The maximum number of items to display in the list.",
      "detailedType": "number | undefined"
    },
    "multiple": {
      "type": "boolean | undefined",
      "default": "false",
      "description": "Whether multiple items can be selected.",
      "detailedType": "boolean | undefined | undefined"
    },
    "onInputValueChange": {
      "type": "((value: string, event: Event | undefined, reason: Combobox.RootInternal.ChangeReason | undefined) => void)",
      "description": "Callback fired when the input value of the combobox changes.",
      "detailedType": "| ((\n    value: string,\n    event: Event | undefined,\n    reason:\n      | Combobox.RootInternal.ChangeReason\n      | undefined,\n  ) => void)\n| undefined"
    },
    "onItemHighlighted": {
      "type": "((value: any, data: { type: 'none' | 'keyboard' | 'pointer', index: number }) => void)",
      "description": "Callback fired when the user navigates the list and highlights an item.\nPasses the item and the type of navigation or `undefined` when no item is highlighted.\n- `keyboard`: The item was highlighted via keyboard navigation.\n- `pointer`: The item was highlighted via pointer navigation.\n- `none`: The item was highlighted via programmatic navigation.",
      "detailedType": "| ((\n    value: any,\n    data: {\n      type: 'none' | 'keyboard' | 'pointer'\n      index: number\n    },\n  ) => void)\n| undefined"
    },
    "onOpenChangeComplete": {
      "type": "((open: boolean) => void)",
      "description": "Event handler called after any animations complete when the popup is opened or closed.",
      "detailedType": "((open: boolean) => void) | undefined"
    },
    "openOnInputClick": {
      "type": "boolean",
      "default": "true",
      "description": "Whether the popup opens when clicking the input.",
      "detailedType": "boolean | undefined"
    },
    "virtualized": {
      "type": "boolean",
      "default": "false",
      "description": "Whether the combobox items are virtualized.",
      "detailedType": "boolean | undefined"
    },
    "disabled": {
      "type": "boolean",
      "default": "false",
      "description": "Whether the component should ignore user interaction.",
      "detailedType": "boolean | undefined"
    },
    "readOnly": {
      "type": "boolean",
      "default": "false",
      "description": "Whether the user should be unable to choose a different option from the popup.",
      "detailedType": "boolean | undefined"
    },
    "required": {
      "type": "boolean",
      "default": "false",
      "description": "Whether the user must choose a value before submitting a form.",
      "detailedType": "boolean | undefined"
    },
    "inputRef": {
      "type": "RefObject<HTMLInputElement>",
      "description": "A ref to the hidden input element.",
      "detailedType": "React.RefObject<HTMLInputElement> | undefined"
    },
    "id": {
      "type": "string",
      "description": "The id of the component.",
      "detailedType": "string | undefined"
    },
    "children": {
      "type": "ReactNode",
      "detailedType": "React.ReactNode | undefined"
    }
  },
  "dataAttributes": {},
  "cssVariables": {}
}
