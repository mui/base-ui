{
  "name": "DialogPopup",
  "description": "A container for the dialog contents.\nRenders a `<div>` element.",
  "props": {
    "initialFocus": {
      "type": "boolean | RefObject<HTMLElement | null> | ((openType: InteractionType) => boolean | void | HTMLElement | null)",
      "description": "Determines the element to focus when the dialog is opened.\n\n- `false`: Do not move focus.\n- `true`: Move focus based on the default behavior (first tabbable element or popup).\n- `RefObject`: Move focus to the ref element.\n- `function`: Called with the interaction type (`mouse`, `touch`, `pen`, or `keyboard`).\n  Return an element to focus, `true` to use the default behavior, or `false`/`undefined` to do nothing.",
      "detailedType": "| boolean\n| React.RefObject<HTMLElement | null>\n| ((\n    openType: InteractionType,\n  ) => boolean | void | HTMLElement | null)\n| undefined"
    },
    "finalFocus": {
      "type": "boolean | RefObject<HTMLElement | null> | ((closeType: InteractionType) => boolean | void | HTMLElement | null)",
      "description": "Determines the element to focus when the dialog is closed.\n\n- `false`: Do not move focus.\n- `true`: Move focus based on the default behavior (trigger or previously focused element).\n- `RefObject`: Move focus to the ref element.\n- `function`: Called with the interaction type (`mouse`, `touch`, `pen`, or `keyboard`).\n  Return an element to focus, `true` to use the default behavior, or `false`/`undefined` to do nothing.",
      "detailedType": "| boolean\n| React.RefObject<HTMLElement | null>\n| ((\n    closeType: InteractionType,\n  ) => boolean | void | HTMLElement | null)\n| undefined"
    },
    "className": {
      "type": "string | ((state: Dialog.Popup.State) => string)",
      "description": "CSS class applied to the element, or a function that\nreturns a class based on the component’s state."
    },
    "render": {
      "type": "ReactElement | ((props: HTMLProps, state: Dialog.Popup.State) => ReactElement)",
      "description": "Allows you to replace the component’s HTML element\nwith a different tag, or compose it with another component.\n\nAccepts a `ReactElement` or a function that returns the element to render.",
      "detailedType": "| ReactElement\n| ((\n    props: HTMLProps,\n    state: Dialog.Popup.State,\n  ) => ReactElement)"
    }
  },
  "dataAttributes": {
    "data-open": {
      "description": "Present when the dialog is open."
    },
    "data-closed": {
      "description": "Present when the dialog is closed."
    },
    "data-nested": {
      "description": "Present when the dialog is nested within another dialog."
    },
    "data-nested-dialog-open": {
      "description": "Present when the dialog has other open dialogs nested within it."
    },
    "data-starting-style": {
      "description": "Present when the dialog is animating in."
    },
    "data-ending-style": {
      "description": "Present when the dialog is animating out."
    }
  },
  "cssVariables": {
    "--nested-dialogs": {
      "description": "Indicates how many dialogs are nested within.",
      "type": "number"
    }
  }
}
