{
  "name": "AutocompleteRoot",
  "description": "Groups all parts of the autocomplete.\nDoesn't render its own HTML element.",
  "props": {
    "name": {
      "type": "string",
      "description": "Identifies the field when a form is submitted.",
      "detailedType": "string | undefined"
    },
    "defaultValue": {
      "type": "string | number | string[]",
      "description": "The uncontrolled input value of the autocomplete when it's initially rendered.\n\nTo render a controlled autocomplete, use the `value` prop instead.",
      "detailedType": "string | number | string[] | undefined"
    },
    "value": {
      "type": "string | number | string[]",
      "description": "The input value of the autocomplete. Use when controlled.",
      "detailedType": "string | number | string[] | undefined"
    },
    "onValueChange": {
      "type": "((value: string, eventDetails: Autocomplete.Root.ChangeEventDetails) => void)",
      "description": "Callback fired when the input value of the autocomplete changes.",
      "detailedType": "| ((\n    value: string,\n    eventDetails: Autocomplete.Root.ChangeEventDetails,\n  ) => void)\n| undefined"
    },
    "defaultOpen": {
      "type": "boolean",
      "default": "false",
      "description": "Whether the popup is initially open.\n\nTo render a controlled popup, use the `open` prop instead.",
      "detailedType": "boolean | undefined"
    },
    "open": {
      "type": "boolean",
      "description": "Whether the popup is currently open.",
      "detailedType": "boolean | undefined"
    },
    "onOpenChange": {
      "type": "((open: boolean, eventDetails: Autocomplete.Root.ChangeEventDetails) => void)",
      "description": "Event handler called when the popup is opened or closed.",
      "detailedType": "| ((\n    open: boolean,\n    eventDetails: Autocomplete.Root.ChangeEventDetails,\n  ) => void)\n| undefined"
    },
    "actionsRef": {
      "type": "RefObject<Autocomplete.Root.Actions>",
      "description": "A ref to imperative actions.\n- `unmount`: When specified, the autocomplete will not be unmounted when closed.\nInstead, the `unmount` function must be called to unmount the autocomplete manually.\nUseful when the autocomplete's animation is controlled by an external library.",
      "detailedType": "| React.RefObject<Autocomplete.Root.Actions>\n| undefined"
    },
    "alwaysSubmitOnEnter": {
      "type": "boolean",
      "default": "false",
      "description": "Whether pressing Enter in the input should always allow forms to submit.\nBy default, pressing Enter in the input will stop form submission if an item is highlighted.",
      "detailedType": "boolean | undefined"
    },
    "autoHighlight": {
      "type": "boolean",
      "default": "false",
      "description": "Whether to automatically highlight the first item while filtering.",
      "detailedType": "boolean | undefined"
    },
    "cols": {
      "type": "number",
      "default": "1",
      "description": "The maximum number of columns present when the items are rendered in grid layout.\nA value of more than `1` turns the listbox into a grid.",
      "detailedType": "number | undefined"
    },
    "filter": {
      "type": "((itemValue: Value, query: string, itemToStringLabel: ((itemValue: Value) => string) | undefined) => boolean) | null",
      "description": "Filter function used to match items vs input query.\nThe `itemToStringLabel` function is provided to help convert items to strings for comparison.",
      "detailedType": "| ((\n    itemValue: Value,\n    query: string,\n    itemToStringLabel:\n      | ((itemValue: Value) => string)\n      | undefined,\n  ) => boolean)\n| null\n| undefined"
    },
    "itemToStringValue": {
      "type": "((itemValue: Value) => string)",
      "description": "When items' values are objects, converts its value to a string representation for display in the input.",
      "detailedType": "((itemValue: Value) => string) | undefined"
    },
    "items": {
      "type": "Group<Value>[] | Value[]",
      "detailedType": "Group<Value>[] | Value[] | undefined"
    },
    "limit": {
      "type": "number",
      "default": "-1",
      "description": "The maximum number of items to display in the list.",
      "detailedType": "number | undefined"
    },
    "locale": {
      "type": "Intl.LocalesArgument",
      "description": "The locale to use for string comparison.\nDefaults to the user's runtime locale.",
      "detailedType": "Intl.LocalesArgument | undefined"
    },
    "modal": {
      "type": "boolean",
      "default": "false",
      "description": "Determines if the popup enters a modal state when open.\n- `true`: user interaction is limited to the popup: document page scroll is locked and pointer interactions on outside elements are disabled.\n- `false`: user interaction with the rest of the document is allowed.",
      "detailedType": "boolean | undefined"
    },
    "mode": {
      "type": "'none' | 'list' | 'inline' | 'both'",
      "default": "'list'",
      "description": "Controls how the autocomplete behaves with respect to list filtering and inline autocompletion.\n- `list` (default): items are dynamically filtered based on the input value. The input value does not change based on the active item.\n- `both`: items are dynamically filtered based on the input value, which will temporarily change based on the active item (inline autocompletion).\n- `inline`: items are static (not filtered), and the input value will temporarily change based on the active item (inline autocompletion).\n- `none`: items are static (not filtered), and the input value will not change based on the active item.",
      "detailedType": "'none' | 'list' | 'inline' | 'both' | undefined"
    },
    "onItemHighlighted": {
      "type": "((itemValue: Value | undefined, data: { type: 'none' | 'keyboard' | 'pointer', index: number }) => void)",
      "description": "Callback fired when the user navigates the list and highlights an item.\nPasses the item and the type of navigation or `undefined` when no item is highlighted.\n- `keyboard`: The item was highlighted via keyboard navigation.\n- `pointer`: The item was highlighted via pointer navigation.\n- `none`: The item was highlighted via programmatic navigation.",
      "detailedType": "| ((\n    itemValue: Value | undefined,\n    data: {\n      type: 'none' | 'keyboard' | 'pointer'\n      index: number\n    },\n  ) => void)\n| undefined"
    },
    "onOpenChangeComplete": {
      "type": "((open: boolean) => void)",
      "description": "Event handler called after any animations complete when the popup is opened or closed.",
      "detailedType": "((open: boolean) => void) | undefined"
    },
    "openOnInputClick": {
      "type": "boolean",
      "default": "true",
      "description": "Whether the popup opens when clicking the input.",
      "detailedType": "boolean | undefined"
    },
    "virtualized": {
      "type": "boolean",
      "default": "false",
      "description": "Whether the items are being externally virtualized.",
      "detailedType": "boolean | undefined"
    },
    "disabled": {
      "type": "boolean",
      "default": "false",
      "description": "Whether the component should ignore user interaction.",
      "detailedType": "boolean | undefined"
    },
    "readOnly": {
      "type": "boolean",
      "default": "false",
      "description": "Whether the user should be unable to choose a different option from the popup.",
      "detailedType": "boolean | undefined"
    },
    "required": {
      "type": "boolean",
      "default": "false",
      "description": "Whether the user must choose a value before submitting a form.",
      "detailedType": "boolean | undefined"
    },
    "inputRef": {
      "type": "RefObject<HTMLInputElement>",
      "description": "A ref to the hidden input element.",
      "detailedType": "React.RefObject<HTMLInputElement> | undefined"
    },
    "id": {
      "type": "string",
      "description": "The id of the component.",
      "detailedType": "string | undefined"
    },
    "children": {
      "type": "ReactNode",
      "detailedType": "React.ReactNode | undefined"
    }
  },
  "dataAttributes": {},
  "cssVariables": {}
}
