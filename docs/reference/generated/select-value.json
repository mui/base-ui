{
  "name": "SelectValue",
  "description": "A text label of the currently selected item.\nRenders a `<span>` element.",
  "props": {
    "initialLabel": {
      "type": "ReactNode",
      "required": true,
      "description": "Specifies the initial value label.\nRequired to display the label before mounting the popup and during pre-rendering.\n\n```tsx\n<Select.Value initialLabel=\"Select an item\" />\n```"
    },
    "children": {
      "type": "ReactNode | ((label: ReactNode, value: any) => ReactNode)",
      "description": "Specifies a controlled label or a callback to customize the value label when uncontrolled.\n\n```tsx\n<Select.Value initialLabel=\"Select an item\">\n  {(label, value) => value !== null ? `${label} (${value})` : label}\n</Select.Value>\n```"
    },
    "className": {
      "type": "string | ((state: Select.Value.State) => string)",
      "description": "CSS class applied to the element, or a function that\nreturns a class based on the component’s state."
    },
    "render": {
      "type": "ReactElement | ((props: HTMLProps, state: Select.Value.State) => ReactElement)",
      "description": "Allows you to replace the component’s HTML element\nwith a different tag, or compose it with another component.\n\nAccepts a `ReactElement` or a function that returns the element to render."
    }
  },
  "dataAttributes": {},
  "cssVariables": {}
}
