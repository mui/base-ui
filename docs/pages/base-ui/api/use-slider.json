{
  "parameters": {
    "aria-labelledby": { "type": { "name": "string", "description": "string" } },
    "defaultValue": {
      "type": {
        "name": "number | ReadonlyArray&lt;number&gt;",
        "description": "number | ReadonlyArray&lt;number&gt;"
      }
    },
    "disabled": { "type": { "name": "boolean", "description": "boolean" }, "default": "false" },
    "disableSwap": { "type": { "name": "boolean", "description": "boolean" }, "default": "false" },
    "isRtl": { "type": { "name": "boolean", "description": "boolean" }, "default": "false" },
    "largeStep": { "type": { "name": "number", "description": "number" }, "default": "10" },
    "marks": {
      "type": {
        "name": "boolean | ReadonlyArray&lt;Mark&gt;",
        "description": "boolean | ReadonlyArray&lt;Mark&gt;"
      },
      "default": "false"
    },
    "max": { "type": { "name": "number", "description": "number" }, "default": "100" },
    "min": { "type": { "name": "number", "description": "number" }, "default": "0" },
    "name": { "type": { "name": "string", "description": "string" } },
    "onValueChange": {
      "type": {
        "name": "(value: number | number[], activeThumb: number, event: Event) =&gt; void",
        "description": "(value: number | number[], activeThumb: number, event: Event) =&gt; void"
      }
    },
    "onValueCommitted": {
      "type": {
        "name": "(value: number | number[], event: React.SyntheticEvent | Event) =&gt; void",
        "description": "(value: number | number[], event: React.SyntheticEvent | Event) =&gt; void"
      }
    },
    "orientation": {
      "type": {
        "name": "&#39;horizontal&#39; | &#39;vertical&#39;",
        "description": "&#39;horizontal&#39; | &#39;vertical&#39;"
      },
      "default": "'horizontal'"
    },
    "rootRef": {
      "type": { "name": "React.Ref&lt;Element&gt;", "description": "React.Ref&lt;Element&gt;" }
    },
    "scale": {
      "type": {
        "name": "(value: number) =&gt; number",
        "description": "(value: number) =&gt; number"
      },
      "default": "function Identity(x) {\nreturn x;\n}"
    },
    "sort": {
      "type": {
        "name": "&#39;asc&#39; | &#39;off&#39;",
        "description": "&#39;asc&#39; | &#39;off&#39;"
      },
      "default": "'asc'"
    },
    "step": { "type": { "name": "number", "description": "number" }, "default": "1" },
    "tabIndex": { "type": { "name": "number", "description": "number" } },
    "value": {
      "type": {
        "name": "number | ReadonlyArray&lt;number&gt;",
        "description": "number | ReadonlyArray&lt;number&gt;"
      }
    }
  },
  "returnValue": {
    "active": { "type": { "name": "number", "description": "number" }, "required": true },
    "areValuesEqual": {
      "type": {
        "name": "(newValue: number | ReadonlyArray&lt;number&gt;) =&gt; boolean",
        "description": "(newValue: number | ReadonlyArray&lt;number&gt;) =&gt; boolean"
      },
      "required": true
    },
    "axis": { "type": { "name": "Axis", "description": "Axis" }, "required": true },
    "changeValue": {
      "type": {
        "name": "(valueInput: number, index: number, event: React.KeyboardEvent | React.ChangeEvent) =&gt; void",
        "description": "(valueInput: number, index: number, event: React.KeyboardEvent | React.ChangeEvent) =&gt; void"
      },
      "required": true
    },
    "compoundComponentContextValue": {
      "type": {
        "name": "CompoundComponentContextValue&lt;any, SliderThumbMetadata&gt;",
        "description": "CompoundComponentContextValue&lt;any, SliderThumbMetadata&gt;"
      },
      "required": true
    },
    "disabled": { "type": { "name": "boolean", "description": "boolean" }, "required": true },
    "dragging": { "type": { "name": "boolean", "description": "boolean" }, "required": true },
    "getFingerNewValue": {
      "type": {
        "name": "(args: { finger: { x: number; y: number }; offset?: number; activeIndex?: number }) =&gt; {\n  newValue: number | number[]\n  activeIndex: number\n  newPercentageValue: number\n}",
        "description": "(args: { finger: { x: number; y: number }; offset?: number; activeIndex?: number }) =&gt; {\n  newValue: number | number[]\n  activeIndex: number\n  newPercentageValue: number\n}"
      },
      "required": true
    },
    "getRootProps": {
      "type": {
        "name": "(externalProps?: React.ComponentPropsWithRef&lt;&#39;span&#39;&gt;) =&gt; React.ComponentPropsWithRef&lt;&#39;span&#39;&gt;",
        "description": "(externalProps?: React.ComponentPropsWithRef&lt;&#39;span&#39;&gt;) =&gt; React.ComponentPropsWithRef&lt;&#39;span&#39;&gt;"
      },
      "required": true
    },
    "handleValueChange": {
      "type": {
        "name": "(value: number | number[], activeThumb: number, event: React.SyntheticEvent | Event) =&gt; void",
        "description": "(value: number | number[], activeThumb: number, event: React.SyntheticEvent | Event) =&gt; void"
      },
      "required": true
    },
    "isRtl": { "type": { "name": "boolean", "description": "boolean" }, "required": true },
    "largeStep": {
      "type": { "name": "number", "description": "number" },
      "default": "10",
      "required": true
    },
    "max": { "type": { "name": "number", "description": "number" }, "required": true },
    "min": { "type": { "name": "number", "description": "number" }, "required": true },
    "open": { "type": { "name": "number", "description": "number" }, "required": true },
    "orientation": {
      "type": {
        "name": "&#39;horizontal&#39; | &#39;vertical&#39;",
        "description": "&#39;horizontal&#39; | &#39;vertical&#39;"
      },
      "default": "'horizontal'",
      "required": true
    },
    "registerSliderTrack": {
      "type": {
        "name": "(element: HTMLElement | null) =&gt; void",
        "description": "(element: HTMLElement | null) =&gt; void"
      },
      "required": true
    },
    "scale": {
      "type": {
        "name": "(value: number) =&gt; number",
        "description": "(value: number) =&gt; number"
      },
      "required": true
    },
    "setActive": {
      "type": {
        "name": "(activeIndex: number) =&gt; void",
        "description": "(activeIndex: number) =&gt; void"
      },
      "required": true
    },
    "setDragging": {
      "type": {
        "name": "(isDragging: boolean) =&gt; void",
        "description": "(isDragging: boolean) =&gt; void"
      },
      "required": true
    },
    "setOpen": {
      "type": { "name": "(index: number) =&gt; void", "description": "(index: number) =&gt; void" },
      "required": true
    },
    "setValueState": {
      "type": {
        "name": "(newValue: number | number[]) =&gt; void",
        "description": "(newValue: number | number[]) =&gt; void"
      },
      "required": true
    },
    "step": {
      "type": { "name": "number", "description": "number" },
      "default": "1",
      "required": true
    },
    "subitems": {
      "type": {
        "name": "Map&lt;string, SliderThumbMetadata&gt;",
        "description": "Map&lt;string, SliderThumbMetadata&gt;"
      },
      "required": true
    },
    "unsortedPercentageValues": {
      "type": { "name": "readonly number[]", "description": "readonly number[]" },
      "required": true
    },
    "unsortedValues": {
      "type": { "name": "readonly number[]", "description": "readonly number[]" },
      "required": true
    },
    "values": {
      "type": { "name": "readonly number[]", "description": "readonly number[]" },
      "required": true
    },
    "aria-labelledby": { "type": { "name": "string", "description": "string" } },
    "name": { "type": { "name": "string", "description": "string" } },
    "onValueCommitted": {
      "type": {
        "name": "(value: number | number[], event: React.SyntheticEvent | Event) =&gt; void",
        "description": "(value: number | number[], event: React.SyntheticEvent | Event) =&gt; void"
      }
    },
    "tabIndex": { "type": { "name": "number", "description": "number" } }
  },
  "name": "useSlider",
  "filename": "/packages/mui-base/src/useSlider/useSlider.ts",
  "imports": ["import { useSlider } from '@base_ui/react/useSlider';"],
  "demos": "<ul><li><a href=\"/base-ui/react-slider/#hook\">Slider</a></li></ul>"
}
